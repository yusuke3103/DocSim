0	Python Japan User's Group	ダウンロードは Google Project からできます。会場 ： IBMイノベーションセンター（渋谷駅徒歩5分）参加費 ： 無料（別途おやつ募金あり）・最近NumPyやSciPyに興味が出てきた人・Rの言語仕様が何となく肌に合わない人・Matlabなどの有償ソフトウェアは入手が難しい人・いろいろな言語の中でPythonが得意な人前提知識：名称 ： PyCon JP 2011こちらは PyCon JP 2011 に参加していない方でも自由に参加可能です。PyCon JP Sprint 開催概要協賛：日本UNIXユーザ会、Kahuaプロジェクト、Tokyo Perl Mongers、日本PHPユーザ会、日本Pythonユーザ会、日本Rubyの会、開催日：2011年8月20日(土)当サイトの文書・画像等のコンテンツの著作権は、各コンテンツの作成者、もしくは日本Pythonユーザ会に帰属します。
1	プログラミング言語 Python	PythonはOSIに認証された オープンソースライセンス で公開されており、商用製品の開発にも無料で利用できます。EuroPython 2014/2015カンファレンスチーム CfPをサイト募集Python 2.7.4 / 3.2.4 / 3.3.1 リリースTokyo.Scipy #5 1月26日に開催科学技術計算に Python を利用するための勉強会 Tokyo.SciPy #5 が、1月26日に開催されます。詳細は Tokyo.SciPy を御覧ください。Published: Sun, 13 Jan 2013, 18:00 +0900Python 3.3.0 リリースPublished: Sat, 29 Sep 2012, 18:00 +0200Python 3.3.0 RC3 リリースPublished: Mon, 24 Sep 2012, 08:00 +0200Python Software Foundationが特別功労賞を発表Published: Fri, 14 Sep 2012, 00:45 +0100ConFoo conference in Canada 2月25日 - 3月13日CanFoo はカナダで2月25日から3月13日まで行われるweb開発に特化した複合技術カンファレンスです。私たちはPythonの発表者を探し、CFPとして募集しています。
2	Python - Wikipedia	Pythonパラダイムマルチパラダイム登場時期1990年設計者■ カテゴリ / ■ テンプレートPythonの最初のバージョンは Amoeba 上で開発されたが、のちに多くのプラットフォーム上で動作するようになっている。1994年 1月、Python1.0がリリースした。主な特徴として 関数型言語 の基本である ラムダ計算 を実装、map関数、reduce関数などが組み込まれている。2000年3月 - ヴァンロッサムとPythonのコア開発チームは BeOpen.com に移り、BeOpen PythonLabs チームを結成する。同年10月、PythonLabsチームはDigital Creations(現在の Zope Corporation ) に移る。また、Pythonではプログラムの文書化（ ソフトウェアドキュメンテーション ）が重視されており、言語の基本機能の一部となっている。Pythonには、読みやすく、それでいて効率もよいコードをなるべく簡単に書けるようにするという思想がすみずみまで浸透しており、Pythonコミュニティでもわかりやすいコードをよしとする傾向が強い [3] 。ブロック構造は、他のメジャーなプログラミング言語（たとえばC言語など）においては、カーリーブラケット（'{ }'。「中括弧」と呼ばれる）を用いて表記されることが多い。しかし、Pythonではこれを行頭からの空白（インデント）によって表記する。これは、「見た目のブロック構造」と「実際の論理的な制御構造」を結びつける手法であり、視覚に訴えるコードの使用を強制する、という意義をもつ。Pythonのコード:def factorial(x): if x == 0: return 1 else: return x * factorial(x - 1)わかりやすく整形されたC言語のコード:int factorial(int x) { if (x == 0) { return 1; } else { return x * factorial(x - 1); } }この例では、Pythonと整形されたC言語とでは、プログラムコードの間に違いがほとんど見られない。しかし、C言語のコードに施されたインデントは（言語仕様においては）単なる コーディングスタイル のひとつにすぎないため、C言語では（言語仕様においては）全く同じプログラムを以下のように書くこともできる。わかりにくいC:int factorial(int x) { if(x == 0) {return 1;} else {return x * factorial(x - 1); } }Pythonではインデントは単なるスタイルではなく、必須の文法であるため、こうした書き方は不可能である。Pythonではこのような強制を課すことによって、プログラムのスタイルがその書き手にかかわらずほぼ統一したものになり、その結果読みやすくなるという考え方が取り入れられている。これについては賛否両論があり、批判的立場の人々からは、これはプログラマがスタイルを選ぶ自由を制限するものだ、という意見も出されている。間違えたC:このコードは文法的には正しいが、言語仕様上のブロックの範囲と、インデントが表現するそれとが異なっているため、プログラマの意図が曖昧になる。この曖昧さは、検知しにくい不具合を生む原因になり得る。ソースコードを読む際、多くの人はインデントのような空白によって明確に整列されたコードを目安として読み、コンパイラのように構文解析しながらソースを読むものではない。その結果、文法は正しく、見た目も一見正しく見えるような不具合を作成してしまう危険性がある。Pythonのデータは動的に型付けされる。値自身が型を持っており、変数はすべて値への 参照 である。さらに組み込みの コンテナ型 として、 リスト 型、 タプル 型、辞書型（ 連想配列 ）のほか、値の重複を許さない 集合 型（Python 2.3以降）がある。Python 3.x以降では、整数型が多倍長整数型と統合され、従来の文字列型とUnicode文字列型に代わり、バイト列型と文字列型が導入された。リスト型および辞書型は内部の値をあとから変えられる（mutable、変更可能）が、タプル型は一度構築したら内部の値は変わらない（immutable、変更不能）。タプル型とリスト型は、多くのプログラミング言語では 配列 と呼ばれるものに類似している。しかし、Pythonではタプル型は辞書のキーとして使うことができるが、リスト型は内容が変わるため辞書のキーとして使うことはできないという理由から、これら 2つの型を区別している。集合型には変更可能なものと変更不能なものの 2種類がある。多くのオブジェクト指向プログラミング言語と同様、Pythonではユーザが新しく自分の型を定義することも可能である。この場合、組み込み型を含む既存の型を継承して新たな型（クラス）を定義する事も、ゼロから全く新しい型を作り出す事も出来る。イテレータ を実装するためのジェネレータが言語仕様に組み込まれており、Pythonでは多くの場面で イテレータ を使うように設計されている。イテレータの使用はPython全体に普及していて、プログラミングスタイルの統一性をもたらしている。クラスの 継承 (inheritance) メカニズムでは、複数の基底クラスを持つことができ（多重継承）、導出されたクラスでは基底クラスの任意のメソッドをオーバライド（override、上書き）することが可能である。また、オブジェクトには任意のデータを入れることができる。これらのメソッドやデータは、基本的に、すべてpublicであり、virtual（仮想）である。ただし、先頭にアンダースコアをもつメンバをprivateとすることができる。これは単なるマナーであるが、アンダースコアを2つもつ場合は、クラスの外部からメンバの名前を隠された状態（難号化（mangle））とすることで カプセル化 を実現できる。また、ほとんどの組み込み演算子（算術演算子（arithmetic operator）や添字表記）はクラスインスタンスで使うために再定義することが可能となっている。Python 3.0では、文字列型がバイト列型に、Unicode文字列型が文字列型に変更された。 従来は文字列の表現方法として2通り（旧文字列型と旧Unicode文字列型）があったが、これを1通り（新文字列型=旧Unicode型）に統一し、旧文字列型は単なるバイト列型として再定義された。 これにより、Python 3.0では、文字列を扱う際には後述の変換処理を必ず行う必要がある。 ファイル入出力など、エンコードを明示しなければ標準エンコードを用いて暗黙に行われる場合も多い。 これにより、多言語の扱いを一貫したものにしている。Pythonでは文字のバイト列表現（ エンコーディング ）とUnicodeの内部表現を明確に区別している。Unicode文字はメモリ中に保持される抽象的なオブジェクトであり、画面表示やファイルへの入出力のさいには、変換ルーチン（ コーデック ）を介して特定のエンコーディングのバイト列表現と相互変換する。また、ソースコード中の文字コードを認識する機能があり、これによって異なる文字コードで書かれたプログラムの動きが異なるという危険を解消している。#! /usr/bin/python # -*- coding: utf-8 -*- s = '日本語の文字列'総合開発環境（汎用）
3	Python Programming Language – Official Website	Python Programming Language – Official WebsiteSupport the Python CommunityUbuntu Linux:Ubuntu prefers the community to contribute work in Python. We develop our own tools and scripts in Python and it's much easier for us to integrate your work if you use the same platform.Python is a programming language that lets you work more quickly and integrate your systems more effectively. You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.Python runs on Windows, Linux/Unix, Mac OS X, and has been ported to the Java and .NET virtual machines.Python is free to use, even for commercial products, because of its OSI-approved open source license .New to Python or choosing between Python 2 and Python 3? Read Python 2 or Python 3 .The Python Software Foundation holds the intellectual property rights behind Python, underwrites the PyCon conference , and funds many other projects in the Python community.The first release candidate for Python 2.6.9, Python 2.6.9rc1, has been released.Published: Mon, 30 September 2013, 21:12 -04002014 PyTennessee Conference CFPPyTennessee Call for Papers runs Oct 1 through Nov 1 - check conference website, for details.Published: Mon, 30 September 2013, 10:40 -0600Python 3.4.0 alpha 3 has been releasedThe third alpha for Python 3.4, Python 3.4.0a3, has been released.Published: Sun, 29 September 2013, 17:00 +0800IronPython 2.7.4 has been releasedIronPython 2.7.4 has been released.Published: Tue, 24 September 2013, 21:00 +0800Python 3.4.0 alpha 2 has been releasedThe second alpha for Python 3.4, Python 3.4.0a2, has been released.Published: Mon, 10 September 2013, 21:00 +08002014 PyTennessee Conference announcedDetails about the upcoming 2014 PyTennessee conference, to be held Feb 22-23, 2014, are available from the conference website, .Published: Wed, 4 September 2013, 06:30 -0600Python 3.4.0 alpha 1 has been releasedThe first alpha for Python 3.4, Python 3.4.0a1, has been released.Published: Sat, 3 August 2013, 23:00 -0800
4	python入門から応用までの学習サイト	メモ書きの意味合いも含めて、開発を行う上で得た知識を公開していきます。サイドメニューに「入門編」「基礎編」「応用編」「外部モジュール」等カテゴリ分けされていますが、特に深い意味はありません。すでにPythonの基礎構文、実行方法等を習得されている方は入門編を飛ばしてご利用ください。これからPythonを学習する、という方は入門編より順番にご利用ください。
5	Python入門	Python入門 広告 Pythonを使ってプログラミングの学習を開始される方を対象として、Pythonを使ったプログラムの記述方法や実行までをサンプルを使いながら順に学習していきます。 関連カテゴリ:Pythonインストール Pythonプログラムの基本事項
6	Python：マピオン大百科 - 地図検索ならMapion	Pythonパラダイムマルチパラダイム登場時期1990年設計者■ カテゴリ / ■ テンプレート特徴Pythonの最初のバージョンは Amoeba 上で開発されたが、のちに多くのプラットフォーム上で動作するようになっている。歴史0.9x1.x2.x3.xしかし2.xとの後方互換性が損なわれており、2.xから3.xへの片方向の変換スクリプトが用意されているものの使用者がまだまだ少ないのが現状である[要出典]。2000年3月 - ヴァンロッサムとPythonのコア開発チームは BeOpen.com に移り、BeOpen PythonLabs チームを結成する。同年10月、PythonLabsチームはDigital Creations(現在の Zope Corporation ) に移る。Pythonに影響を与えた言語また、Pythonではプログラムの文書化（ ソフトウェアドキュメンテーション ）が重視されており、言語の基本機能の一部となっている。Pythonには、読みやすく、それでいて効率もよいコードをなるべく簡単に書けるようにするという思想がすみずみまで浸透しており、Pythonコミュニティでもわかりやすいコードをよしとする傾向が強い [3] 。ブロック構造は、他のメジャーなプログラミング言語（たとえばC言語など）においては、カーリーブラケット（'{ }'。「中括弧」と呼ばれる）を用いて表記されることが多い。しかし、Pythonではこれを行頭からの空白（インデント）によって表記する。これは、「見た目のブロック構造」と「実際の論理的な制御構造」を結びつける手法であり、視覚に訴えるコードの使用を強制する、という意義をもつ。Pythonのコード:def factorial(x): if x == 0: return 1 else: return x * factorial(x - 1)わかりやすく整形されたC言語のコード:int factorial(int x) { if (x == 0) { return 1; } else { return x * factorial(x - 1); } }この例では、Pythonと整形されたC言語とでは、プログラムコードの間に違いがほとんど見られない。しかし、C言語のコードに施されたインデントは（言語仕様においては）単なる コーディングスタイル のひとつにすぎないため、C言語では（言語仕様においては）全く同じプログラムを以下のように書くこともできる。わかりにくいC:int factorial(int x) { if(x == 0) {return 1;} else {return x * factorial(x - 1); } }Pythonではインデントは単なるスタイルではなく、必須の文法であるため、こうした書き方は不可能である。Pythonではこのような強制を課すことによって、プログラムのスタイルがその書き手にかかわらずほぼ統一したものになり、その結果読みやすくなるという考え方が取り入れられている。これについては賛否両論があり、批判的立場の人々からは、これはプログラマがスタイルを選ぶ自由を制限するものだ、という意見も出されている。間違えたC:このコードは文法的には正しいが、言語仕様上のブロックの範囲と、インデントが表現するそれとが異なっているため、プログラマの意図が曖昧になる。この曖昧さは、検知しにくい不具合を生む原因になり得る。ソースコードを読む際、多くの人はインデントのような空白によって明確に整列されたコードを目安として読み、コンパイラのように構文解析しながらソースを読むものではない。その結果、文法は正しく、見た目も一見正しく見えるような不具合を作成してしまう危険性がある。Pythonのデータは動的に型付けされる。値自身が型を持っており、変数はすべて値への 参照 である。さらに組み込みの コンテナ型 として、 リスト 型、 タプル 型、辞書型（ 連想配列 ）のほか、値の重複を許さない 集合 型（Python 2.3以降）がある。Python 3.x以降では、整数型が多倍長整数型と統合され、従来の文字列型とUnicode文字列型に代わり、バイト列型と文字列型が導入された。リスト型および辞書型は内部の値をあとから変えられる（mutable、変更可能）が、タプル型は一度構築したら内部の値は変わらない（immutable、変更不能）。タプル型とリスト型は、多くのプログラミング言語では 配列 と呼ばれるものに類似している。しかし、Pythonではタプル型は辞書のキーとして使うことができるが、リスト型は内容が変わるため辞書のキーとして使うことはできないという理由から、これら 2つの型を区別している。集合型には変更可能なものと変更不能なものの 2種類がある。多くのオブジェクト指向プログラミング言語と同様、Pythonではユーザが新しく自分の型を定義することも可能である。この場合、組み込み型を含む既存の型を継承して新たな型（クラス）を定義する事も、ゼロから全く新しい型を作り出す事も出来る。イテレータ を実装するためのジェネレータが言語仕様に組み込まれており、Pythonでは多くの場面で イテレータ を使うように設計されている。イテレータの使用はPython全体に普及していて、プログラミングスタイルの統一性をもたらしている。オブジェクト指向プログラミングクラスの 継承 (inheritance) メカニズムでは、複数の基底クラスを持つことができ（多重継承）、導出されたクラスでは基底クラスの任意のメソッドをオーバライド（override、上書き）することが可能である。また、オブジェクトには任意のデータを入れることができる。これらのメソッドやデータは、基本的に、すべてpublicであり、virtual（仮想）である。ただし、先頭にアンダースコアをもつメンバをprivateとすることができる。これは単なるマナーであるが、アンダースコアを2つもつ場合は、クラスの外部からメンバの名前を隠された状態（難号化（mangle））とすることで カプセル化 を実現できる。また、ほとんどの組み込み演算子（算術演算子（arithmetic operator）や添字表記）はクラスインスタンスで使うために再定義することが可能となっている。ライブラリ多言語の扱いPython 3.0では、文字列型がバイト列型に、Unicode文字列型が文字列型に変更された。 従来は文字列の表現方法として2通り（旧文字列型と旧Unicode文字列型）があったが、これを1通り（新文字列型=旧Unicode型）に統一し、旧文字列型は単なるバイト列型として再定義された。 これにより、Python 3.0では、文字列を扱う際には後述の変換処理を必ず行う必要がある。 ファイル入出力など、エンコードを明示しなければ標準エンコードを用いて暗黙に行われる場合も多い。 これにより、多言語の扱いを一貫したものにしている。Pythonでは文字のバイト列表現（ エンコーディング ）とUnicodeの内部表現を明確に区別している。Unicode文字はメモリ中に保持される抽象的なオブジェクトであり、画面表示やファイルへの入出力のさいには、変換ルーチン（ コーデック ）を介して特定のエンコーディングのバイト列表現と相互変換する。また、ソースコード中の文字コードを認識する機能があり、これによって異なる文字コードで書かれたプログラムの動きが異なるという危険を解消している。#! /usr/bin/python # -*- coding: utf-8 -*- s = '日本語の文字列'利用教育用統合開発環境（専用）総合開発環境（汎用）Visual Python IDE · PIDA · PyDev · Spyder · Wing IDE · Eric Python IDE · Geany  · ActiveState  · omodo · MonoDevelop  · NetBeans  · wxGlade
7	Python - Welcome to Arisawa Labo	3.2.0 文字列(string)に対する join メソッドPython は次の URL から無料でダウンロードできます。Python の講義テキスト:「Python によるプログラミング入門(第6版)」download (2012/06/05)Python によるグラフィックスを最近の変化に合わせて手直ししたものです。またこの内容は筆者の講義テキスト第III部を構成しています。Python によるグラフィックスの最初の手引きとして手頃です。この記事は2000年に発表された筆者の記事Python による GUI の構築法 I --- ウィジェットの配置 ---」     「Com」Vol.11, No.1     愛知大学情報処理センター     2000年3月の再録である。この記事は2000年に発表された筆者の記事「Python による GUI の構築法 II --- ウィジェット各論 ---」     「Com」Vol.11, No.2     愛知大学情報処理センター     2000年9月の再録である。この記事は2001年に発表された筆者の記事「Python による GUI の構築法 III --- Text ウィジェット ---」     「Com」Vol.12, No.1、     愛知大学情報処理センター、     2001年5月の再録である。download (2005/03/09)Python による動的グラフィックスの再録である。from Tkinter import Tk, Label, Button, Frame import tktable  def run_cmd():         print var.get() root = Tk()  label = Label(root, text='Tk Table Usage Sample') label.pack(side = 'top', fill = 'x') bottom_frame = Frame(root) run = Button(bottom_frame, text='Run', command=run_cmd) run.pack(side = 'left') quit = Button(bottom_frame, text='QUIT', command=root.destroy) quit.pack(side = 'right') bottom_frame.pack(side='bottom', fill='x')  var = tktable.ArrayVar(root) # we set initial table value for x in range(0, 4):         for y in range(0, 5):                 index = '%i,%i' % (y, x) # note that (row,col)                 var.set(index, '0') print var.get()  table = tktable.Table(root, rows=5, cols=4, variable=var) table.pack()  root.mainloop()文字列(string)に対する join メソッドstring モジュールの join 関数はの形で使う。ここに X は文字列のリストあるいはタプルで、Yは文字列である。join が返す値はX[0] + Y + X[1] + Y + X[2] + ... + Y + X[n-1]    式(1)で n は X のサイズ(長さ)である。Y を省略すれば、式(1)から Y を省いた計算をした方が理に適っているのだが、Y には1文字の空白 ' ' が使われる。この仕様は、join が文字列の分解 split の逆を行うものとして考えられているからである。この意味で join の仕様は文字列に特化している。ところで、join メソッドが他の string メソッドと大きく違う(例外的な)のはY.join(X)X.join(Y)でないのかと。
8	Download Python	DownloadStart with one of these versions for learning Python or if you want the most stability; they're both considered stable production releases.If you don't know which version to use, try Python 3.3.  Some existing third-party software is not yet compatible with Python 3; if you need to use such software, you can download Python 2.7.x instead.For the MD5 checksums and OpenPGP signatures, look at the detailed Python 3.3.2 page:Python 3.3.2 xzipped source tarball (for Linux, Unix or Mac OS X, better compression)For the MD5 checksums and OpenPGP signatures, look at the detailed Python 2.7.5 page:The following testing versions are available:This site hosts the 'traditional' implementation of Python (nicknamed CPython). A number of alternative implementations are available as well, namelyIronPython (Python running on .NET)Jython (Python running on the Java Virtual Machine)PyPy (A fast python implementation with a JIT compiler)Stackless Python (Branch of CPython supporting microthreads)Other parties have re-packaged CPython.  These re-packagings often include more libraries or are specialized for a particular application:ActiveState ActivePython (commercial and community versions, including scientific computing modules)pythonxy (Scientific-oriented Python Distribution based on Qt and Spyder)winpython (WinPython is a portable scientific Python distribution for Windows)Enthought Canopy (a commercial distribution for scientific computing)Portable Python (Python and add-on packages configured to run off a portable device)PyIMSL Studio (a commercial distribution for numerical analysis – free for non-commercial use)Anaconda Python (a full Python distribution for data management, analysis and visualization of large data sets)eGenix PyRun (a portable Python runtime, complete with stdlib, frozen into a single executable file)Information about specific ports, and developer info:Anthony Baxter (key id: 6A45C816 )Georg Brandl (key id: 36580288 )Martin v. Löwis (key id: 7D9DC8D2 )Benjamin Peterson (key id: A4135B38 )Ronald Oussoren (key id: E6DF025C)Ned Deily (key id: 6F5E1540 )Larry Hastings (key id: F73C700D )Note: Barry's key id A74B06BF is used to sign the Python 2.6.8 and 2.6.9 releases.  His key id EA5BBD71 was used to sign all other Python 2.6 and 3.0 releases.  His key id ED9D77D5 is a v3 key and was used to sign older releases.You can import the release manager public keys by either downloading the public key file from here and then running% gpg --import pubkeys.txtor by grabbing the individual keys directly from the keyserver network by running this command:% gpg --recv-keys A74B06BF EA5BBD71 6A45C816 ED9D77D5 \     7D9DC8D2 A4135B38 36580288On the version-specific download pages, you should see a link to both the downloadable file and a detached signature file.  To verify the authenticity of the download, grab both files and then run this command:% gpg --verify Python-3.3.0.tgz.ascNote that you must use the name of the signature file, and you should use the one that's appropriate to the download you're verifying.(These instructions are geared to GnuPG and Unix command-line users. Contributions of instructions for other platforms and OpenPGP applications are welcome.)Other Useful ItemsLooking for 3rd party Python modules?  The Package Index has many of them.You can view the standard documentation online, or you can download it in HTML, PostScript, PDF and other formats.  See the main Documentation page.Tip: even if you download a ready-made binary for your platform, it makes sense to also download the source . This lets you browse the standard library (the subdirectory Lib) and the standard collections of demos (Demo) and tools (Tools) that come with it.  There's a lot you can learn from the source!There is also a collection of Emacs packages that the Emacsing Pythoneer might find useful.  This includes major modes for editing Python, C, C++, Java, etc., Python debugger interfaces and more.  Most packages are compatible with Emacs and XEmacs.Want to contribute?  See the Python Developer's Guide to learn about how Python development is managed.[1]( 1 , 2 ) The binaries for AMD64 will also work on processors that implement the Intel 64 architecture (formerly EM64T), i.e. the architecture that Microsoft calls x64, and AMD called x86-64 before calling it AMD64. They will not work on Intel Itanium Processors (formerly IA-64).[2]
9	概要 — Python 2.7ja1 documentation	Python 2.7ja1 documentation Python 2.7ja1 ドキュメント 最終更新日: 2013-10-02 Python 2.7.2 のドキュメントの日本語訳です。 ... What's new in Python 2.7? チュートリアル ここから始めましょう ライブラリリファレンス 枕の下に置いて ...
10	pythonとは - はてなキーワード - はてなダイアリー - 写真・画像 ...	欧米を中心に海外では人気のある言語。日本でも今後一層の普及が望まれる所。創始者であるGuidoが Google で働いており，50%を Google の仕事に，50%を Python の仕事に使っている。他にも，沢山の著名なPythonista( Python 使い)が Google に雇われている。
11	Overview — Python 2.6.6 documentation	ドキュメントの一覧:The Python Software Foundation is a non-profit corporation. Please donate.Created using Sphinx 1.2pre.
12	Pythonの意味 - 英和辞典 Weblio辞書	ハイパー英語辞書python【名詞】1用例PythonPython用例A python constricting a goat.語源Python 式 - Python© 2000 - 2013 Hyper Dictionary, All rights reservedCopyright (C) 1994- Nichigai Associates, Inc., All rights reserved.All Rights Reserved, Copyright © Japan Science and Technology AgencyCopyright (C) 2013 ライフサイエンス辞書プロジェクト日本語ワードネット 1.1版 (C) 情報通信研究機構, 2009-2010 License All rights reserved.WordNet 3.0 Copyright 2006 by Princeton University. All rights reserved. LicenseCopyright © 2013 CJKI. All Rights ReservedCopyright © 2013 Cross Language Inc. All Right Reserved.
13	Pythonとは - OSS用語 Weblio辞書 - 辞典・百科事典の検索 ...	参照リンク■ カテゴリ / ■ テンプレート統合開発環境（専用）総合開発環境（汎用）Visual Python IDE · PIDA · PyDev · Spyder · Wing IDE · Eric Python IDE · Geany  · ActiveState  · omodo · MonoDevelop  · NetBeans  · wxGladePythonに関係した商品All text is available under the terms of the GNU Free Documentation License .この記事は、ウィキペディアのPython (改訂履歴) の記事を複製、再配布したものにあたり、GNU Free Documentation Licenseというライセンスの下で提供されています。 Weblio辞書 に掲載されているウィキペディアの記事も、全てGNU Free Documentation Licenseの元に提供されております。
14	python - 機械学習の「朱鷺の杜Wiki」	↑bottleneck ：NaN 扱うsumなど，いくつかのnumpy関連関数の高速版  pynopticon ：bag of featuresによる物体認識rpythonic ：RPythonの拡張で，Cなどの呼び出しが容易になり，standaloneのバイナリが生成できる．psyco ：import して psyco.full() か psyco.profile() とすると早くなる JIT コンパイラ．64bitでは使えない(?)↑Last-modified: 2013-08-05 (月) 03:59:21  (59d)
15	Python - Wikibooks	目次シェルからpythonコマンドを実行すると次のようなコマンドラインインタプリタが起動します。Python 2.6.4 (r264:75706, Dec  7 2009, 18:45:15)  [GCC 4.4.1] on linux2 Type 'help', 'copyright', 'credits' or 'license' for more information. >>>>>>はプロンプトです。文法早わかり[ 編集 ]Pythonのブロックはインデントによって表されます（オフサイドルール）。>>> def f(n): ...     return n if n < 2 else f(n - 2) + f(n - 1) ... >>> f(10) 55見てのとおり関数の定義はdef、文字列の出力はprint()を使います。Python 2ではprint文の括弧は必須ではありませんが、Python 3以降はprint()演算子の括弧は必須です。#から行末まではコメントです。条件演算子はcondition ? ifTrue : ifFalseではなくifTrue if condition else ifFalseという書き方をします。文末に;を付ける必要はありません。よって、PythonによるHello worldは次のようになります。>>> print('Hello, world!') Hello, world!文字列は''で囲んでも''で囲んでも同じ意味であり、エスケープ文字の取り扱いに違いはありません。ところで、無名関数を定義するにはlambda文を使用します。これは ラムダ計算 に由来するものです。特に宣言をしていない変数は自動的にローカル変数になります。文字列は''''''で囲むこともできます。これはdocstringと呼ばれ、ドキュメンテーションに用いられる記法ですが、複数行コメントやヒアドキュメントにも用いることができます。なおPython 2のUnicodeサポートは万全ではないため、非ASCII文字を含むプログラムを書く場合は最初の行に# -*- coding: utf-8 -*-というコメントを挿入してください。また、バージョンに限らずソースコードのテキストファイルはUTF-8で符号化してください。シェルスクリプトと同様、\で区切られた行は継続します。ところで、最初のフィボナッチ数を求める再帰の例はPythonらしい書き方ではありません。Pythonではyieldがサポートされており、ジェネレータを簡単に書くことができます。def f():     a, b = 0, 1 while True: yield a         a, b = a + b, a   g = f() for i in range(10): try: print( g.next() ) except: print( next(g) )a, b = 0, 1というのは分割代入で、a = 0; b = 1を表します。a, b = a + b, aも同様ですが、代入は一気に行われるためt = a; a = a + b; b = tと同義です（変更前のaの値がbに代入される）。while True:というのはwhile文ですが、Pythonの制御構文では条件式を括弧で囲む必要がありません。TrueはFalseやNoneと同じ定義済みキーワードの一つで真の値を持ちます。yield文はreturn文と同様ですが、サブルーチンの戻り値を途中で返すことができます。nextメソッドを呼ぶと処理が継続されます。このような関数fをジェネレータまたはコルーチンなどといいます。プログラムをいじりましょう。あせらずじっくりと考えて、手を動かして体で覚えてください。またはまたは>>> from cmath import e, pi >>> e ** (1j * pi) (-1+1.2246063538223773e-16j)**は冪乗演算子です。importはモジュールをインポートします。from module import object0, object1, ..., objectNでモジュールmoduleからオブジェクトobject0, object1, ..., objectNを現在の名前空間にインポートすることができます。基本的な数学関数および定数はmathモジュール、複素変数を扱える関数および定数はcmathモジュールで定義されています。このほかにもさまざまなモジュールが存在し、モジュールを作成することもできます。Pythonでは組み込みのset型およびfrozenset型で集合を扱うこともできます。配列はarray = ['A', 'B', 'C']のように表しarray[0]、array[1]、array[2]のようにアクセスしますが、Pythonでは JavaScript にも輸出された配列の内包表記をサポートしています。これは配列の中にfor-in文とイテレータを書くことができ、mapの役割を果たすものです。>>> [ i for i in range(10) ] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]配列の内包表記は非常に強力です。これを使ってAからZまでの文字を要素に含む配列を作るには次のようにします。chr()は文字コードを文字に、ord()は文字を文字コードに変換します。なお、十六進法の整数リテラルは0xdeadbeefのように '0x' から始まります。3735928559Lのように末尾にLの付く整数リテラルはlong型です。>>> [ chr(i) for i in range( ord('A'), ord('Z') + 1 ) ] ['A', 'B', 'C', 'D', 'E', 'F', 'G',  'H', 'I', 'J', 'K', 'L', 'M', 'N',  'O', 'P', 'Q', 'R', 'S', 'T', 'U',  'V', 'W', 'X', 'Y', 'Z']内包表記はジェネレータと同じくPythonの個性的な言語機能の一つです。これらの習得には感覚的な部分、すなわち慣れもあるので、たくさんのコードを書いては動かし、動かしては書いて覚えてください。辞書は連想配列でありオブジェクトです。>>> { 'zero': 0, 'one': 1, 'two': 2 } {'zero': 0, 'two': 2, 'one': 1}タプルは対でありリストです。>>> ( 'zero', 0, 'one', 1, 'two', 2 ) ('zero', 0, 'one', 1, 'two', 2)ところで、文字列は配列と同じようにアクセスすることができます。配列のスライスはブラケットの中で:演算子を使用します。正規表現 はPerl Compatible Regular Expressionsですが組み込みではなくCライブラリとして実装されています。reモジュールをインポートして使用します。>>> import re >>> m = re.match(r'<title>(.*?)</title>', '<TITLE>Example Web Page</TITLE>', re.I) >>> m.group(0) '<title>Example Web Page</title>' >>> m.group(1) 'Example Web Page'r''やr''のようなraw文字列はエスケープ文字を解釈しないので、\dや\sなどのメタ文字を書くのに重宝します。matchメソッドは第一引数に正規表現パターン、第二引数にマッチ対象文字列、第三引数にre.Iやre.IGNORECASEやre.Mやre.MULTILINEやre.Sやre.DOTALLなどのフラグを指定します。Pythonに正規表現リテラルというものは存在しません。# -*- coding: utf-8 -*- try: from urllib.request import urlopen except: from urllib2 import urlopen print( urlopen('http://www.example.com/').read().decode() )レスポンスはbytesで返ってくるので、decodeメソッドを使用してstrに変換しています。JSON[ 編集 ]u''やu''はunicode型です。Python 2ではunicode型でなければUnicode文字列を正しく扱うことができませんでしたが、Python 3以降は従来のunicode型がデフォルトになり、unicode型は削除されました。またrange()の強化版であったxrange()も削除され、新しいrange()になりました。なお、Python2.x系のバージョンならばprint content という書式も使用可能です。インクリメントとデインクリメント[ 編集 ]PythonにはC/C++やJavaにあるインクリメント演算子とデインクリメント演算子は存在しません。>>> a=50 >>> a=a+1 >>> print('%d'%a) 51>>> def p(): ...     pass ... >>> p()このページ「Python」は、 書きかけ です。加筆・訂正など、協力いただける皆様の 編集 を心からお待ちしております。また、ご意見などがありましたら、お気軽に ノート へどうぞ。
16	Pythonとは - 意味/解説/説明/定義 ： IT用語辞典	パイソンPython
17	www.f7.ems.okayama-u.ac.jp	Python$BF~Lg(B
18	スタート ガイド: Python - Google App Engine — Google Developers	このチュートリアルでは、Google App Engine を使ってシンプルな Python プロジェクトを開発、展開する方法について説明します。サンプル プロジェクト（ゲストブック）を例に、Python ランタイム環境を使用する方法、データストアや Google ユーザー サービスなど、さまざまな App Engine サービスを使用する方法を学びます。このチュートリアルは、次のセクションで構成されています。Last updated 6月 20, 2013.
19	基本構文 - python入門から応用までの学習サイト	書き込んだらファイル名を「test02.py」とし、文字コードを「UTF-8」で作業ディレクトリへ保存します。 これでモジュールの完成です。先程と同じようにプログラムを実行します。python test02.py#! c:/Python26/python.exe # -*- coding: utf-8 -*-   print u'モジュールのロード'  def test():     print u'関数：testを呼び出しました'  if __name__ == '__main__':      print 'python-izm' #   print 'パイソンイズム'     test()#! c:/Python26/python.exe # -*- coding: utf-8 -*-   print u'モジュールのロード'  def test():     print u'関数：testを呼び出しました'  if __name__ == '__main__':      print 'python-izm' #   print 'パイソンイズム'     test()前述した通り、Pythonではブロック構造に「 { 」（中カッコ）を用いない、インデントでのブロック構造となっています。 ですので関数「test」の範囲は7行目、if文の範囲は10行目から13行目となります。 慣れない内は大変ですが、すぐ慣れます。 尚、見た目上はインデントがきちんとしていても、タブと半角スペースが混じったインデントはエラーとなります。(4タブと半角スペース4つ、など）先程の実行結果に12行目の「パイソンイズム」は出力されませんでした。 その理由は12行目、行頭の「#」（シャープ）がPythonではコメントアウト記号となっているからです。 シャープ以降の記述は全て無視されます。#! c:/Python26/python.exe # -*- coding: utf-8 -*-   print u'モジュールのロード'  def test():     print u'関数：testを呼び出しました'  if __name__ == '__main__':      print 'python-izm' #   print 'パイソンイズム'     test()#! c:/Python26/python.exe # -*- coding: utf-8 -*-   print u'モジュールのロード'  def test():     print u'関数：testを呼び出しました'  if __name__ == '__main__':      print 'python-izm' #   print 'パイソンイズム'     test()次に「python-izm」が出力されています。 上から順に処理していますが、7行目のprint文は関数の配下にいるので、test関数が呼ばれない限り実行される事はありません。さらに下へ行くと、先程も触れたif文があります。 スクリプトとして実行しているので、「__name__」には「__main__」が入っています。 ですのでこの評価式はtrueとなり、if文の中身が実行され if文内、最初の命令である「python-izm」が出力されます。#! c:/Python26/python.exe # -*- coding: utf-8 -*-   print u'モジュールのロード'  def test():     print u'関数：testを呼び出しました'  if __name__ == '__main__':      print 'python-izm' #   print 'パイソンイズム'     test()次の「パイソンイズム」はコメントアウトされているのでスルーされます。 そして最後にtest関数が呼び出されて「関数:testを呼び出しました」が出力される、という順番です。#! c:/Python26/python.exe # -*- coding: utf-8 -*-   print u'モジュールのロード'  def test():     print u'関数：testを呼び出しました'  if __name__ == '__main__':      print 'python-izm' #   print 'パイソンイズム'     test()パーフェクトPythonみんなのPython第3版PythonでかんたんAndroidプログラミングPythonでかんたんiOSアプリプログラミング困った時はドキュメントを参照しましょう！
20	MacWiki - Python	% sw_vers ProductName:    Mac OS X ProductVersion: 10.7.4 BuildVersion:   11E53  $ which python /usr/bin/python $ python --version Python 2.7.1 $ python -c 'import sys,math;print math.log(sys.maxint+1)/math.log(2)+1' 64.0 $ python -c 'import numpy;print numpy.__version__' 1.5.1 $ python -c 'import distutils.sysconfig;print distutils.sysconfig.get_python_lib()' /Library/Python/2.7/site-packages $ defaults read com.apple.versioner.python {    'Prefer-32-Bit' = 0; }64 or 32 ビット動作については アクティビティモニタ でPythonのプロセスの「種類」を見るとより確実でしょう。モジュールのインストールについてpython本体とモジュールの整合に注意が必要architecture：MacOSX 10.6 標準には，universal: 64 bit (x86_64)/ 32 bit (i386)/ ppc の Python 2.6.1 と NumPy 1.2.1 がインストールされる。インストール済みモジュールを調べるモジュールのarchitectureを調べる調べ方が統一されているわけではないhttp://www.python.org/downloadpython-3.3.x.dmgpython-3.2.x.dmgpython-3.1.x.dmgpython-2.7.x.dmgpython-2.6.x.dmgpython-2.5.x.dmg$ brew info python python: stable 2.7.4 http://www.python.org : : $ which python /usr/local/bin/python $ python --version Python 2.7.4 $ python -c 'import distutils.sysconfig;print distutils.sysconfig.get_python_lib()' /usr/local/lib/python2.7/site-packagesPython環境を整える例$ ls -ld `which git` lrwxr-xr-x  1 me  admin  28  6 18 10:02 /usr/local/bin/git -> ../Cellar/git/1.7.11/bin/git $ brew install gfortran $ sudo easy_install numpy $ sudo easy_install scipy $ sudo easy_install matplotlib $ sudo easy_install pandasEnthought Canopy[ 編集 ] setup tools一部のモジュールに対して管理機能（インストール等）を提供既存のsetuptoolsをアップデートにはアンインストールの例インストールに clang を必要とするモジュールもある。milkのインストールは、$ brew install eigen $ sudo CC=clang CXX=clang++ easy_install milkeasy_installおよびpipコマンドではインストールできないモジュールでもダウンロードし処理しようとするが、下記例のようにエラーとなる。したがってsetup.pyでインストールする必要がある（下記の方法）。$ tar -xzf cvxopt-1.1.5.tar.gz $ cd cvxopt-1.1.5/src $ sudo python setup.py install --record install_log.txt :  :  $ ls /Library/Python/2.7/site-packages |grep cvxopt cvxopt cvxopt-1.1.5-py2.7.egg-info $ pip freeze |grep cvxopt cvxopt==1.1.5 $ pip search cvxopt CVXOPT                    - Convex optimization packageなお、cvxopt-1.1.6 は pip でインストールできるようになった。$ pip install cvxopt$ pip search numpy --timeout=30PIPを使って、Python Imaging Library (PIL) をインストールする例$ sudo ARCHFLAGS='-arch i386 -arch x86_64' pip install PILインストールされているモジュールの一覧を見る例開発版モジュールをPyPI以外からインストールする例：$ sudo -E pip install hg+ https://bitbucket.org/lgautier/rpy2/ $ pip freeze Warning: cannot find svn location for rpy2==2.4.0devdev-20121004 ## FIXME: could not find svn URL in dependency_links for this package: rpy2==2.4.0devdev-20121004 : :インストールされているモジュールの新しいバージョンを探す例（必ずしも正しく探せるわけではない）：$ pip list | cut -d \( -f 1 | xargs -n 1 pip search | grep -B2 'LATEST:' GDAL                      - GDAL: Geospatial Data Abstraction Library   INSTALLED: 1.10.1   LATEST:    1.10.0IPython 0.12.x は、Python 2.6, 2.7  と 3.1 を公式にはサポート。 webベースのノートブック機能付き。$ ipython notebook [NotebookApp] The IPython Notebook is running at: http://127.0.0.1:8888/ [NotebookApp] Use Control-C to stop this server and shut down all kernels.IPython 0.10.0 は、Python 2.5 と 2.6 を公式にはサポートIPython 0.10.1 は、Python 2.7 もサポートSciPy 0.8.0 は Python 2.4 - 2.6 までをサポートSciPy 0.9.0 は Python 2.4 - 2.7 及び 3.1 をサポート（ NumPy 1.5 が必要）$ python -c 'from distutils import util;print util.get_platform()' macosx-10.6-universal $ python setup.py install : : Can't install when cross-compiling10.7.4 用の中身は、下記はoutdated。This shell script will install recent 64-bit builds of Numpy (1.7) and Scipy (0.11), Matplotlib (1.2), iPython (0.12), Pandas (0.6), Statsmodels (0.4.0) as well as PyMC (2.2 alpha) for OS X 10.7 (Lion) on Intel Macintosh. . Dependencies: OS X 10.7 (Lion), Python 2.7, Xcode 4.2下記の各種バイナリ＋ソースのインストーラー。Snow Leopard（GCC 4.2.1, Python 2.6.1）環境向けにビルドされている。superpack_10.6_2010.12.15.sh。numpy-2.0.0.dev_799179d_20101215, matplotlib-1.0.0, scipy-0.10.0.dev_20101215, pymc-2.1beta_20101215MacOSX 10.6 には Python 2.6.1 と NumPy 1.2.1 とが標準で入っているNumPy 1.3.x や 1.4.x は Python 2.6 までをサポートNumPy 1.5.x は Python 3.1 までをサポートMacOSX 10.7 には Python 2.7.1 と NumPy 1.5.1 とが標準で入っているNumPy 1.6.x は Python 3.2 までをサポートPythonのリストやNumPyの配列（ndarray）などの例import numpy def myprint(x):     print x, '<--', x.__class__.__name__ a = range(1, 3) b = numpy.array(a) # b = numpy.arange(1, 3) c = tuple(a) d = {'python': 7, 'ruby': 8} myprint(a) #=> [1, 2] <-- list myprint(b) #=> [1 2] <-- ndarray myprint(numpy.vectorize(lambda x: x*2)(b)) #=> [2 4] <-- ndarray myprint(c) #=> (1, 2) <-- tuple myprint(d) #=> {'python': 7, 'ruby': 8} <-- dict myprint(map(lambda x: isinstance(x, (list, numpy.ndarray, tuple, dict)), [a, b, c, d]))$ ipython --pylab In [1]: x = randn(10000) In [2]: hist(x, 100) In [3]: quitインストールテストテスト例$ python globe.py 20このページは 30,016 回アクセスされました。
21	PYTHON | カーセキュリティ | KATO-DENKI 加藤電機株式会社	自動車、二輪車を対象とし、最先端技術を投入したトップレベルのセキュリティシステム。 ... PYTHON Menu ※盗難保険申し込み終了について ※見舞金制度保険申し込み終了について PYTHON 660XP-V 新保安基準対応PYTHON！
22	Pythonが最高である3つの理由	Pythonに限らず、プログラミング言語が日本で普及するかどうかの鍵を握っているのは、（幸か不幸か）日本語情報の多寡であると思います。Rubyの事情は正直よくわかりませんが、たとえばPerlがこれだけ日本でメジャーになったのは、Perlが好きでPerlを使う人達が「情報発信好き」という要素が大きいと思います。もちろん、Perlの使い手たちがもともと情報発信好きだったわけではなく、やはりid:miyagawaあたりの活動というか貢献がかなりでかいんじゃないでしょうか。ある時期以降から急にコミュニティの情報発信が増え、Perl使いたちの交流が活発になった気がします。いわゆるキャズムを越えたというやつかもしれません。一方、日本におけるPythonも、まさに今、キャズムを越えようとしている段階です。Pythonの勉強会やHackathonなども増えてきた気がしますし、筆者もPythonが広がるとうれしいので、事あるごとにPythonを勧めたり、「これからメジャーになるよ」という話をしたりしています。ただ、こういう場面でよく感じるのが、すでにPythonどっぷりな人と、そうでない人の間の温度差です。すでにPythonに慣れ親しんでいる人からすれば、周りにPythonistaがたくさんいるし、交流も活発だし情報交換も多いように見えるのはまあ当然といえば当然です。ところが、まだまだ企業での事例とかそういうレベルでは、正直いってようやく最近多少増えてきた、という感じです。お客さんと話していても、PerlやRubyやPHPの話はごく当たり前のようにでてきても、Pythonというと「Pythonですか！？」という反応をされることが多いです。そこで、Google App EngineやFacebookのケースを説明すると、「ああ、なるほどねえ」となるのですが、逆に言えばそういう機会がなければ「Pythonですか！？」のままだったかもしれないということです。技術というものは、しょせん使われてナンボです。「この良さがいいとわかる人だけ使えばいいんだ」というのでは駄目です。すでにPythonに詳しい人たちの貴重な知識と経験、そして「日本語の情報」がもっと流通すれば、Pythonは日本に根を下ろすでしょう。「いやPython別にマイナーじゃないし。十分メジャーだし」なんていっていては、そもそもPythonの可能性を自ら狭めることになりかねません。そうではなくて、「みんなPythonいいよー、もっともっと使っていこうぜ」というような、積極的な情報発信をもっと増やすべきなのです。実際、日本でも今年になって、企業がPythonを採用するケースが少しずつ増えています。多少はPythonを使っている人間として、少しでもPython普及の手伝いができれば、ということで連載を始めることにしました。
23	「Python」最新記事一覧 - ITmedia Keywords	データ分析アプリケーション高速化にも期待：Chrome、Firefox、Internet Explorer、Opera、Android、iOSといったブラウザに対応し、Java、C#、Python、Rubyが使えるWebテスト自動化ツールの3つの特徴と環境、実装方法を簡単に紹介（2012/10/5）特集：人気言語でのデータ処理の比較：Javaサポートも追加：Python MANIAX：Beginner's Guide：Programing Bible：UNIX USER2005年2月号特別企画より転載：キーワード一覧に戻る
24	Python - PukiWiki - Hiroshima University	Pythonについて知るこれ一つインストールすれば、科学技術計算から結果のグラフ化/可視化までこなせる。おすすめは1だったのだが、名前とメールアドレスの記入が必要になり面倒になった模様(2009年3月6日確認)。大学での利用に限って無料になったらしい。求人柱。便利さが違う。↑$ python hoge.pyとして実行する。直線が引かれる。VTKについては次の2つのサイトが詳しい。尺八郎の3Dで始めるプログラミングHello Worldというタイトルのウィンドウが表示される。IPythonを起動して、次を入力。from scipy import * from pylab import *  a = zeros(1000) a[:100] = 1  b = fft(a)  plot(abs(b)) show()おしまい。画像が表示される。おしまい。画像ファイルへのパスは適当に変更すること。PILのWebsitehttp://www.pythonware.com/products/pil/index.htm当然、WordやPower Pointも操作できる。カレントディレクトリに、グラフの画像(test.jpg)が作成される。(インストールの前に 、C:\Python24\Lib\site-packages\numpyとscipy を削除しておいたほうがいいかもしれない。）http://cens.ioc.ee/projects/f2py2e の例を試してみる。次の内容のhello.fを作成(on Cygwin)。subroutine foo (a)      integer a      write(6,*) 'Hello from Fortran!' write(6,*) 'a=', a      end次のコマンドを入力。pythonから呼び出してみる。成功。次のファイル(example.c)を作成。/* File : example.c */  #include <time.h> double My_variable = 3.0;  int fact(int n) {     if (n <= 1) return 1;     else return n*fact(n-1); }  int my_mod(int x, int y) {     return (x%y); }   char *get_time() {     time_t ltime;     time(&ltime);     return ctime(&ltime); }インターフェースファイル(example.i)を作成。/* example.i */ %module example %{ /* Put header files here or function declarations like below */ extern double My_variable; extern int fact(int n); extern int my_mod(int x, int y); extern char *get_time(); %}  extern double My_variable; extern int fact(int n); extern int my_mod(int x, int y); extern char *get_time();Tutorialに書いてある、Building a Python module の方法ではコンパイルできない。次のようにすれば、コンパイルが通り、 共有ファイル(_example.dll)が作成される。試してみる。成功。SWIG↑あるいはIDLE (Python GUI)を起動し、 次のコードをコピー&ペーストしてF5で実行してもいい。from visual import *  floor = box (pos=(0,0,0), length=4, height=0.5, width=4, color=color.blue) ball = sphere (pos=(0,4,0), radius=1, color=color.red) ball.velocity = vector(0,-1,0) dt = 0.01  while 1:  rate (100)  ball.pos = ball.pos + ball.velocity*dt  if ball.y < ball.radius:    ball.velocity.y = -ball.velocity.y  else:    ball.velocity.y = ball.velocity.y - 9.8*dt床の上ではずむボールのアニメーションが得られる。ダブルクリックして実行して試してみるといい。しかし、 このままではモジュール間のバージョンの違いが原因でうまく動かない。24行目をTrueに変更。41行目をアンコメント。次のように入力する。HF Energy = -1.1312837961 と表示されて成功。原子の数が表示される。↑ftp://ftp.u-aizu.ac.jp を選択 (どこでもよい)。Develより、g77, gcc-mingwを選択。これで、$ ipythonMayaViはVTKのフロントエンドプログラム。MayaVi2はそのニューバージョン。MayaVi1 is a free, easy to use scientific data visualizer. http://mayavi.sourceforge.net/MayaVi2: the next generation↑Python Enthought Editionに含まれていなくて、おもしろそうな、その他のモジュールMMTK The Molecular Modelling ToolkitThe Molecular Modelling Toolkit is a library which contains a wide range of algorithms that are used in molecular simulations and modelling. http://dirac.cnrs-orleans.fr/plone/software/mmtkPyOpenGL 2.0 The Python OpenGL(R) BindingPyOpenGL is the cross platform Python binding to OpenGL and related APIs. http://pyopengl.sourceforge.net/BiopythonPyVib2PyVib2 is a program for analyzing vibrational motion and vibrational spectra, written in pure Python. http://pyvib2.sourceforge.net/index.htmlPyChem the multivariate analysis package for pythonPyChem ( http://pychem.sf.net/) is a multivariate analysis package written in Python. http://fruitcake.mib.man.ac.uk/pychem/RPy (R from Python)RPy is a very simple, yet robust, Python interface to the R Programming Language. http://rpy.sourceforge.net/Frowns ChemoInformatics SystemFrowns is a chemoinformatics toolkit geared toward rapid development of chemistry related algorithms. http://frowns.sourceforge.net/ASE Atomic Simulation Environment↑
25	Python - おなかすいたWiki！ - wiki.onakasuita.org	例↑import thisThe Zen of Python, by Tim Peters  Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!↑↑mutableなコンテナ↑immutable(変更不能)なコンテナ↑↑↑ローカル変数に該当のがなければグローバルを見に行く関数の中で代入したい場合はglobal宣言を行えば良い↑文字列型やリスト型の欲しい位置の最初と終りを コロン':'で分けて、指し示すことができる↑↑↑↑一番短いシーケンスの長さに切り詰められる長いシーケンスに合わせたい場合はmap(None,シーケンス1,シーケンス2)とする↑↑for文のアンパック代入↑↑Python 2.4以前ではtry-finallyとtry-except-elseを同居させることができないのでネストさせる必要がある↑空のリスト結合を利用ファイルを一覧表示↑アクセス:2672 本日:2
26	Pythonとは？ - Welcome To JAGAT	はじめにPythonは，その機能の柔軟さや豊かさに加えて，何の制約もないフリーウェアということもあって，世界で広い支持を得ています。1998年になって，Mark Lutz著の“Programming Python”（O'Reilly and Associates社，1996年）の邦訳“Python入門”及び“Pythonプログラミング”（飯坂剛一他共訳，オライリー・ジャパン，1998年）の二分冊が刊行されたことによって，わが国でも普及が進むと思われます。Pythonの機能Pythonは，習得しやすい，強力なプログラミング言語です。Pythonは，効果的な高水準なデータ構造と，単純ながらオブジェクト指向プログラミングへの効果的なアプローチを持っています。Pythonの洗練された構文と動的な型付けは，その対話的性格と合わせて，多くの分野での急速な応用開発とスクリプティングのための理想的な言語をほとんどのプラットホームにおいて実現しています。Pythonインタプリターは，C又は C++（又は，Cから呼び出し可能な他の言語）で実行された新しい関数とデータ型をもって容易に拡張されます。また，Pythonは，カスタマズ可能な応用のための拡張言語としても適当です。（中略）標準のオブジェクトとモジュールについては，“Python Library Reference ”を参照して下さい。“Python Reference Manual”は，言語について，より形式的に定義しています。C又はC++の拡張を書くには，“Extending and Embedding and the Python Interpreter”と“Python/C API manual”を読んで下さい。（後略）これらの説明書は，PDF版になっており，“http://www.cwi.nl/ftp/python/doc/pdf-1.5.tar.gz ”からダウンロードできます。コンパイルやリンクの処理がない型の宣言がない自動的なメモリー管理高水準のデータ型と操作オブジェクト指向プログラミングCによる組み込みと拡張私（岸 和孝）は，ケーススタディとしてPython Frameworkを応用した EsisBrowser という特殊なブラウザーを開発してみました。1週間という短い期間で開発でき，Pythonの強力さが実感できました。謝辞一見したところ，PerlとPythonでは，余り大きな違いはありません。しかし，よく比べれば，次のことに気が付くでしょう。全体的な処理の流れは，PerlとPython共に同じです。PerlとPythonのキーワードは似ていますが，その構文は異なります。注釈は，PerlとPython共に同じ書き方です。Perlでは文の終端にセミコロンが必要ですが，Pythonでは要りません。Perlでは変数名はデータオブジェクトに付けた名前で，その名前はオブジェクトの記憶場所を表わしていますが，Pythonでは変数名はオブジェクトを指す名前です。Perlではサブルーチンの呼び出しにおいて，値渡し又は参照渡しを明示しますが，Pythonではメソッド（つまり，関数）の呼び出しにおいて常にオブジェクト参照渡しとなります。▼Perlスクリプト[1] # Perlによる処理 [2] print 'infile...' ; $infilename = <> chop($infilename) ; [3] open IN, '<$infilename' ; [4] $lno = 0 ; [5] while ($text = <IN>) { [6]     $lno = $lno + 1 ; [7]     print '$lno\t$text' ; [8] } [9] close IN ;▼Pythonスクリプト[1] # Pythonによる処理 [2] infilename = raw_input('input file...') [3] IN = open(infilename, 'r') [4] lno = 0 [5] for text in IN.readlines() : [6]     lno = lno + 1 [7]     print lno, '\t', text, [8] [9] IN.close()（1998年11月記）
27	Python - Welcome to Yamanaka Grp!	Mac OS X でのPythonMac OS X 10.5 (Leopard)には2.5.1が入っているので、別途インストールはしなくても構いません。python をTerminalから走らせてみて表示されるversionが2.5よりも古かったら、      もしくは最新のPythonを使いたい場合は MacPython 2.5.2 をインストールする。Mac OS X用に作られたuniversal installerがあります。:filetype on :autocmd FileType python set tabstop=4 shiftwidth=4 expandtabを入れておくと便利。また、 python.vim も便利。絶版だが、www.amazon.com などからは古本が送料$10弱で手に入る。      (本の値段は場合による。私の場合は$1.82だった）      実質的な使い方がいろいろと書かれており、プログラミングを知っている人には手っ取り早い。 Errata「PerlユーザのためのPython移行ガイド」 マーティン・C・ブラウン著、細谷昭訳、      ピアソン・エデュケーション発行 (2002)は、上の本の和訳。 正誤表Updated 2012-10-15 Taku Yamanaka
28	Python - HIDAZINE	また、初期状態の機能が少なく、高速な処理が期待できます。機能追加のたびに必要なモジュールをインポートしてください。文字列文字列の出力 a = 'あいうえお' print a 文字列の複数行出力 a = ''' ハルペー トライデント グングニル ''' print a辞書型辞書型 (連想配列)の宣言dic = {'騎士':'セイバー' , '弓兵':'アーチャー'}  条件分岐 if x==1:  print '1です' elif x==2:  print '2です' elif x>2:  print '2より大きいです' else:  print '0以下です'レンタルサーバの環境モジュール一覧モジュール名説明string文字列操作re正規表現structバイナリデータを文字列に変換difflibファイルの差分を得るdatetime日時を表すデータ型array配列math数学関数decimal浮動小数点演算random乱数発生.pydistutils.cfgeazy_installがコマンドで使えるようになる#!/usr/bin/env python #coding: utf-8 import os class Player():     n = 5     def __init__(self):         self.timer = 0     def add_number(self, i):       self.n = self.n + i     def add_timer(self):       self.timer ++テンプレートエンジン makoインストールの確認(ビルド時にエラーが出るときは、以下のパッケージをインストールしてからビルドするとうまくいくかも。)インストールの確認と打って、なにもエラーが起きなければ成功。Books|プログラミング Books|HTML VideoGames|DS VideoGames|PSP VideoGames|PlayStation3 VideoGames|XBOX VideoGames|任天堂 VideoGames|エニックス
29	Python [ja.nishimotz.com]	逆はフォーマット演算子でできる。obj.methodname() : メソッド呼び出しlogfile = open(outwavfile + '.log', 'w') print_log = lambda s : logfile.write(s.decode('shift_jis').encode('utf-8')) # print_log('text: ' + s)スタックとして使うには append / popキューとして使うには append / pop(0)len(オブジェクト) は要素数を取得。文字列の場合は文字数を取得。リスト内包[式 for x in vec]  vec = [1,2,3] として 式 = 3*x とすると [3,6,9] が得られる >>> vec = [1,2,3] >>> v2 = x * 2 for x in vec SyntaxError: invalid syntax >>> v2 = [x * 2 for x in vec] >>> v2 [2, 4, 6]del文 : リストのインデックス指定された要素を削除する配列は足し算できる：>>> b = [1,2,3] >>> c = [4,5,6] >>> d = b + c >>> d [1, 2, 3, 4, 5, 6]ソートには sort() メソッドが使える：>>> d += b >>> d [1, 2, 3, 4, 5, 6, 1, 2, 3] >>> d.sort() >>> d [1, 1, 2, 2, 3, 3, 4, 5, 6] >>> d.sort(reverse=True) >>> d [6, 5, 4, 3, 3, 2, 2, 1, 1]カッコはタプルの生成を意味するわけではないらしい。t = 1, 2, 3 # パッキング  要素数0のタプル : t = () 要素数1のタプル : t = (1,)  x,y,z = 1,2,3  # タプル・パッキングされた右辺を、シーケンス・アンパッキングして左辺へシーケンスデータ型 : インデックス参照やスライス演算ができるループをまわすシーケンスのループのための関数条件による値の振り分け>>> print 'hoge' if True else 'fuga' hoge >>> print 'hoge' if False else 'fuga' fugaモジュールのインポートとは実行であるモジュールはプライベートなシンボル表を持つfrom future で将来バージョンの機能を有効にする：ビルトイン関数 dir(モジュール)パッケージ __init__.py>>> class Hoge(object): ... __slots__ = ('a', 'b') ... >>> o = Hoge() >>> o.a = True >>> o.b = False >>> p = Hoge() >>> p.a = True >>> p.b = False >>> o == p False >>> o == o Truenamedtuple はイコール演算子で比較できるが、プロパティの値を更新できない。>>> from collections import namedtuple >>> Foo = namedtuple('Foo', 'a b') >>> o2 = Foo(True, False) >>> p2 = Foo(True, False) >>> o2 == p2 True >>> q2 = Foo(True, True) >>> o2 == q2 False >>> o2.a True >>> o2.b False >>> o2.b = True Traceback (most recent call last):   File '<stdin>', line 1, in <module> AttributeError: can't set attributelogging.Logger でログファイルを簡単に扱える。os.path.exists() で調べて os.mkdir() する方がお行儀がよい。。カレントディレクトリの下を探して、ファイル名の末尾が ~1~ ~2~ などであるものを見つけて、（os.remove の行が有効の場合）削除する。import os, re for root, dirs, files in os.walk('.'): for f in files: if re.match('.+~\d~', f):             s = root + os.sep + f print s # os.remove(s)def convert_file(src_file, src_enc, dest_file, dest_enc): with open(src_file) as sf: with open(dest_file, 'w') as df: while 1:     s = sf.readline() if not s: break df.write(s.decode(src_enc).encode(dest_enc))Guido van RossumTarek Ziadeアスキー・メディアワークス売り上げランキング: 10775ビープラウド秀和システム
30	Pythonインストールと環境設定 - Pythonの学習ならPythonWeb	Pythonのインストール方法や初期設定について確認します ... PythonをWindows環境で利用するためにインストールする方法を確認していきます。インストールするOSはWindows7(32bit)です。
31	Amazon.co.jp： 初めてのPython 第2版: マーク ルッツ ...	Amazon.co.jp： 初めてのPython 第2版: マーク ルッツ, デイビッド アスカー, Mark Lutz, David Ascher, 夏目 大: 本初めてのPython 第2版 [単行本]この商品をチェックした人はこんな商品もチェックしています（日経Linux 2005/02/01 Copyright©2001 日経BP企画..All rights reserved.）-- 日経BP企画内容紹介おすすめ度：一番致命的だと思うのは，日本人がPythonのプログラムを作っていてかならずハマる，コード内で日本語を扱うための情報がまったく掲載されていない点。5つ星のうち 3.0 何かの言語を熟知している人にはお勧めできません 2008/4/9こう書きましたが、Pythonからプログラミングを始めてみようという初心者にとっては、懇切丁寧な解説が、非常によい言語習得の助けとなるかも知れません。ただ、あくまでも個人的な予測ですが、Pythonの基本部分をもっとすっきりと分かりやすく解説する本が他にありそうな気がします（そう思えるほどこの本の解説は冗長で、退屈で、読むのに時間がかかります）という表現が複数個所出てきますが、多少英語を知っていればわかるように（「(計算機への)命令文」の意味になるのは通常'excecutable statement' )上記のほかにも、原著では '21.4.3.1 User-defined Iterators'となっているところが本書ではただ単に「イテレータ」と書いてあり、
32	PYTHON│カーセキュリティ取付 AQUA	キーワード価格範囲円〜円車種別エンジンスターターエンジンスターター商品名エンジンスターター商品名エンジンスターター商品名商品名PYTHON323OPTION品名内容価格
33	python | スラッシュドット・ジャパン	さらに、Pythonコードのみに限った場合は不具合率は0.005と大幅に低かったそうだ。これは、1000行のコード中に不具合が0.005個見つかる、という割合らしい。Mayaといえばゲーム業界などで多用される3DCGソフトのデファクトスタンダードとして知られ、Maya単体で53万5500円、最上位版のAutodesk Entertainment Creation Suite 2013 Ultimateが122万8500円と、価格もプロフェッショナル向け。だが、昨今のモバイル市場におけるインディーズ系開発者の隆盛をみて、インディーズのゲーム開発者でも利用できる廉価版Mayaのリリースが必要と判断したようだ。ただし、Mayaが業界のスタンダードとなった大きな理由であるスクリプトやプラグインなどの機能が省かれていたり、出力可能なポリゴン数が2万5000ポリゴンまでに制限されているなど、上位版から大きく機能が制限されて11万円超という点は評価が分かれると思われる。HackerMeterでは提示された「お題」を解決するためのコードを作成させることで、そのスキルを採点するサービス。コーディングやテスト、解答はすべてWebブラウザ上で実行する。対応言語はRuby、Python、Java、C、C++。面白いのは、ブラウザ上でのコード入力がすべて記録されるという点。プログラマを探している雇用者は、その候補者のコードだけでなく、どのようにコードを作成しているのかというのを確認できるという。主要Webサーバーのシェア変動グラフを見ると、2010～2011年をピークにApache HTTP Serverのシェアは下落している一方でMicrosoftのIISやnginx、そしてそれ以外（Other）のWebサーバーがシェアを伸ばしている。また、「アクティブなサイト」のシェアではIISの伸びはほとんどなく、nginxやそれ以外のシェアが上昇している。近年ではNode.jsや、RubyやPythonなどのスクリプト言語向けHTTPサーバーライブラリなどが普及しているため、それらがApacheのシェアを奪っているのではと推測できる。開催日時は2013年8月24日（土）10時30分から20時まで、場所はすみだ産業会館（東京都墨田区江東橋3丁目9番10号 墨田区・丸井共同開発ビル8・9階）、参加費は一般2,000円、ペア（2名入場可）3,000円、学生1,000円。別売りのチケットを購入することでTシャツを購入することもできます。 チケットは6月20日より販売開始 されています。LLまつりは例年開催されているLLカンファレンス の11回目となります。LLカンファレンスは軽量プログラミング言語に関する総合カンファレンスです。 例年、さまざまな言語についての講演などが行われていました。 さらに、今年はLLカンファレンスでははじめての試みとなるマルチトラックを採用しています。B会場 はプレゼンテーションのトラックとなっており、「Javascriptエンジンによるアプリの動的実行環境を作っている話」「Lightweigt Language 'Go'」「加速器制御システムでのLL言語の利用について(仮)」「天文学におけるLL利用の過去と現在」「アプリケーション層プロトコルの変化からみるInternetの未来予測(仮)」「HTML5とか今風の技術を使ってWebサービスを作る 〜 wri.peの作り方」「ニコニコ学会βとIT勉強会の幸せな関係」「関数型志向Python」「LL好きにおすすめ: こんなこともできるWindows PowerShell」「GNUプロジェクト、30周年」「A language for the rest of us」といった興味深い内容が採択されています。C会場 はチュートリアルのトラックとなっており、「第6回チャンピオンシップシェル芸ランナー勉強会 in LLまつり」と題したシェルやシェルスクリプトを中心としたチュートリアルのほか、全部で三件ほどの内容を検討しているそうです。また、締めにはA会場とB会場を併用して、恒例となっている ライトニングトーク を行います。祭りにふさわしく盛り上がりそうです。GitHubにて開発途上のソースコードが公開されているが、PythonベースでGmailのようなメール検索機能を持つWebメールクライアントを開発しようとするものだ。Code Puzzleは『広義の「パズル」を、プログラムを道具として使って解いていこう』というもので、RubyおよびPython向けに問題が出題されている。写真とコードだけで語られた謎解き問題を解いていく過程を楽しむもので、賞品や特典などはない。腕自慢の方は「とても難しい裏問題」にもチャレンジしてみては。Rubyist Magazineによると、エンジニアに向けた任天堂の広報活動の1つとしてスタートしたものらしい。Python版は2012年9月のPyCon JPに向けて公開し、続いてRuby版が登場したという経緯だそうだ。ちなみに任天堂内ではPythonやRubyだけでなく、さまざまな言語が利用されているそうだ。日程：2013年6月29日(土)参加費：無料 （人数把握のため、 参加登録 をお願いします。）「Drupal」の国際色豊かなコミュニティーはフレンドリー且つビギナーにも親切と評判とのこと。「Python」のコミュニティーは大きく、フレンドリーでアクティブ、そして多様であるとしている。そのほか、LibreOffice、PostgreSQL、Ubuntu、PC-BSDを紹介している。また7つめとしては特定のオープンソースプロジェクトではなく、「ドキュメンテーションからスタートすること」を奨励している。いっぽうビギナーが避けるべきものとしては、Linuxカーネルが挙がっている。テクノロジージャーナリストのSteven Vaughan-Nichols氏によれば、それはまるで「リトルリーグのバットを持ってヤンキースに挑むようなもの」とのこと。しかもLinuxカーネルのデベロッパー達のやりとりは残酷な程に率直で、威圧的としている。Poultney氏によれば、製品の名称にPythonを使用することを決定した際、技術スタッフが一人も参加していなかったのだそうだ。もし、技術者が参加していれば、オープンソースコミュニティーからどういった反応が起きるのか事前に予測することができたとしている。DDoS攻撃を受けているためPython Hostingは使用不可能な状態となっているが、Poultney氏は、こうした事態になってしまったこと、またPythonコミュニティーに不愉快な思いをさせてしまったことを遺憾に思っていると話したという。また、世界中のデベロッパーコミュニティーをどれだけ怒らせてしまったのか今は理解しているとし、もはや解決策は一つしかないと述べたとのこと。この会社は13年前にドメイン「python.co.uk」を取得。当時は商標問題もなかったため、Python Software Foundationでは差し止めなどの対応はしなかったそうだ。同社では長い間親会社にアクセスを転送するだけだったが、その後親会社のVeberがサーバー製品の名称として「Python」を使い始めた。この件についてPSFは話し合おうとしたが、python.co.uk側の回答は欧州共同体商標の出願だったという。出願内容はソフトウェアやサーバー、Webサービスについて、同社による「Python」の名称の排他的な使用権をEU全域で主張するものとのこと。これに対してPSF側は、EU域でPythonが広く使われてきたという証拠を欧州共同体商標意匠庁に提出する意向だ。証拠を集めるため、PSFではPythonを使用するEU域内の企業などに対し、会社の便箋にPythonの使用状況などをまとめた手紙の提供を求めているほか、EU域内で発行された「プログラミング言語としてのPython」に関連する出版物などの提供を求めている。PSFがPythonの知的財産を守るために法的手続きを行うのは初とのこと。この開発者は 40 代半ばで C, C++, perl, java, Ruby, php, python に精通した (という評価の) 人物で、勤務時間中は Reddit を閲覧したりぬこ動画に興じたり Ebay を眺めつつ Facebook や LinkedIn を更新して九時五時の生活をしていた。彼の年収の数十万ドルのうち 1/5 は中国企業に支払われており、アウトソーシングした仕事の成果によって「社内でも優秀な開発者」と評されていたという。VPN のログから発覚したということだが、アウトソーシング先が優秀だったのか、この人物のマネージング能力が優秀だったのか、なかなか判断に困るところである。貧富の差があるんだから当然 (5 points, すばらしい洞察)  by Anonymous Coward on 2013年09月30日 16時43分Re:iPhoneの機内モードは×、iPod touchは○ (5 points, 参考になる)  by taka2 on 2013年09月30日 12時28分
34	Python for Android のインストール - Android 開発入門	Python for Android のインストールブラウザで http://code.google.com/p/android-scripting/ にアクセスします。SL4A のトップから Python for Android のページへ行き・・・パッケージへのリンクがあるので、それをクリックします。SL4A のときと同様に、もし聞いてこなかったら Menu → More → Downloads から python_for_android_r1.apk を選びます。するとインストールが開始します。例えば、python_r7.zip や ・・・メニューに戻ると確かに Python for Android がインストールされています。SL4A を選択すると、次のように Python のスクリプトがリスト表示されます。次にこれを実行してみましょう。スポンサーリンク
35	ホーム — PythonMatrixJp	ã‚µã‚¤ãƒˆï¼š http://golang.orgãƒ„ã‚¢ãƒ¼ï¼š http://go-tour-jp.appspot.com/#1ã‚µã‚¤ãƒˆï¼š https://bitbucket.org/akorn/wheezy.webãƒ‰ã‚­ãƒ¥ãƒ¡ãƒ³ãƒˆï¼š http://packages.python.org/wheezy.web/ç‰¹å¾´ãƒ¬ãƒ³ã‚¿ãƒ«å…±ç”¨ã‚µãƒ¼ãƒ�ã�§é�‹ç”¨å�¯èƒ½ã€‚ã‚µãƒ¼ãƒ�ã�«Pythonã�•ã�ˆã�‚ã‚Œã�°OKã€‚sshãƒ­ã‚°ã‚¤ãƒ³ã�ªã�—ã�§ã‚‚ã�ªã‚“ã�¨ã�‹ã�ªã‚‹ã€‚Mercurialã‚’åˆ©ç”¨ã€‚2013/02/10kivyã�£ã�¦ã�ªã�«ï¼Ÿã‚µã‚¤ãƒˆï¼š http://kivy.org/ ã‚½ãƒ¼ã‚¹ï¼š https://github.com/kivy/kivyã�“ã�“ã�§å…¬é–‹ã�•ã‚Œã�¦ã�„ã‚‹ãƒžãƒ«ãƒ�ã‚¿ãƒƒãƒ�ã‚¢ãƒ—ãƒªé–‹ç™ºã‚­ãƒƒãƒˆã�®å��ç§°ã�§ã�™ã€‚Fresh/Fast/Flexible/Focused/Funded/Freeã‚’ä¿¡æ�¡ã�«é–‹ç™ºã�•ã‚Œã�¦ã�„ã‚‹ã��ã�†ã�§ã�™ã€‚PySideã�£ã�¦ã�ªã�«ï¼ŸQt ãƒ™ãƒ¼ã‚¹ã�®GUIãƒ•ãƒ¬ãƒ¼ãƒ ãƒ¯ãƒ¼ã‚¯ã�®Pythonãƒ�ã‚¤ãƒ³ãƒ‡ã‚£ãƒ³ã‚°ã€‚PyQtã�¨ã�„ã�†ã�®ã‚‚ã�‚ã‚Šã�¾ã�™ã�Œã€�PySideã�¯LGPLãƒ©ã‚¤ã‚»ãƒ³ã‚¹ã�®å…ƒã�§å†�å®Ÿè£…ã�•ã‚Œã�Ÿã‚‚ã�®ã�§ã�™ã€‚ ä½¿ã�„æ–¹ã�¯PyQtã�¨ã�»ã�¨ã‚“ã�©å�Œã�˜ã€‚2013/02/10ç›®çš„ã‚¨ãƒ©ãƒ¼ï¼ˆä¾‹å¤–ï¼‰ã�Œç™ºç”Ÿã�—ã�Ÿæ™‚ã€�è‡ªå‹•çš„ã�«ãƒ‡ãƒ�ãƒƒã‚¬ã€Œpdbã€�ã‚’èµ·å‹•ã�—ã�¦ã€� ã��ã�®æ™‚ç‚¹ã�®ã‚¹ã‚¿ãƒƒã‚¯ãƒ•ãƒ¬ãƒ¼ãƒ ã‚„ä¸Šæµ�éšŽå±¤ã�«é€†ä¸Šã�£ã�¦çŠ¶æ³�ã�®ç¢ºèª�ã�Œã�—ã�Ÿã�„ï¼�ã�§ã‚‚æ­¢ã‚�ã�Ÿã�„ç®‡æ‰€ã�Œåˆ†æ•£ã�—ã�¦ã�„ã�¦ã�„ã�¡ã�„ã�¡ãƒ–ãƒ¬ãƒ¼ã‚¯ãƒ�ã‚¤ãƒ³ãƒˆè²¼ã�£ã�Ÿã‚Šã‚¹ãƒ†ãƒƒãƒ—å®Ÿè¡Œã�¨ã�‹ã�—ã�¦ã‚‰ã‚“ã�ªã�„ï¼�ã�¿ã�Ÿã�„ã�ªçŠ¶æ³�ã�§å½¹ã�«ç«‹ã�¤ãƒ‡ãƒ�ãƒƒã‚°æ‰‹æ³•ã�§ã�™ã€‚TinkererTinkererã�®ç‰¹å¾´Sphinxã�¨Sphinxæ‹¡å¼µã�¨ãƒ¦ãƒ¼ãƒ†ã‚£ãƒªãƒ†ã‚£ã‚³ãƒžãƒ³ãƒ‰ã� ã�‘ã�§ä½œã‚‰ã‚Œã�¦ã‚‹ã€‚reStructuredText(Sphinx)ã�§æ›¸ã�‘ã‚‹ã€‚ã‚«ãƒ†ã‚´ãƒªã€�ã‚¿ã‚°ã€�ã‚¢ãƒ¼ã‚«ã‚¤ãƒ–æ©Ÿèƒ½ã�‚ã‚Šã€‚rssãƒ•ã‚£ãƒ¼ãƒ‰ç”Ÿæˆ�ã‚‚å‡ºæ�¥ã‚‹ã€‚ã‚³ãƒ¡ãƒ³ãƒˆã‚¨ãƒ³ã‚¸ãƒ³ã�«DISQUSã�‹FBã‚³ãƒ¡ãƒ³ãƒˆã�Œä½¿ã�ˆã‚‹ã€‚ãƒ¢ãƒ€ãƒ³ã�ªãƒ†ãƒ¼ãƒžã�Œã�„ã��ã�¤ã�‹äºˆã‚�é�¸æŠžã�§ã��ã‚‹ã€‚
36	Python 日本語 ダウンロード - Python 3.2.3 無料でダウンロード	ソフト種類: Freeware日付追加: 2012-04-13ファイルサイズ: 15.13MBソフト作者:  PythonAdvertisementPython は Guido van Rossum 氏による、フリーなオブジェクト指向プログラミング言語です。 Red Hat 系 Linux ではインストーラや環境設定ツールの開発言語として利用されているので、Python スクリプトをご覧になったことのある方も多いのではないでしょうか。Python の開発は、1990 年ごろから開始されています。開発者の Guido van Rossum は教育用のプログラミング言語「ABC」の開発に参加していましたが、ABC は実用上の目的にはあまり適していませんでした。このため、Guido はより実用的なプログラミング言語の開発を開始し、英国 BBC 放送のコメディ番組「モンティ パイソン」のファンである Guido はこの言語を「Python」と名づけました。このような背景から生まれた Python の言語設計は、「シンプル」で「習得が容易」という目標に重点が置かれています。多くのスクリプト系言語ではユーザの目先の利便性を優先して色々な機能を言語要素として取り入れる場合が多いのですが、Python ではそういった小細工が追加されることはあまりありません。言語自体の機能は最小限に押さえ、必要な機能は拡張モジュールとして追加する、というのが Python のポリシーです。別の言語で Python をレビューする
37	Pythonをインストールする - Dive Into Python 3 日本語版	  Pythonã‚’ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹❝ Tempora mutantur nos et mutamur in illis.ï¼ˆæ™‚å‹¢ã�¯å¤‰ã‚�ã‚Šã€�æˆ‘ã€…ã‚‚ã��ã‚Œã�¨ã�¨ã‚‚ã�«å¤‰ã‚�ã‚‹ï¼‰❞ é£›ã�³è¾¼ã‚€Python 3ã�§ã�®ãƒ—ãƒ­ã‚°ãƒ©ãƒŸãƒ³ã‚°ã‚’å§‹ã‚�ã‚‹å‰�ã�«ã€�ã�¾ã�šã�¯Python 3ã‚’ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹å¿…è¦�ã�Œã�‚ã‚‹ã€‚ã��ã‚Œã�¨ã‚‚ã€�ã‚‚ã�†ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�—ã�¦ã�‚ã‚‹ã� ã‚�ã�†ã�‹ï¼Ÿã�©ã�®Pythonã‚’ä½¿ã�ˆã�°ã‚ˆã�„ã�®ã� ã‚�ã�†ã�‹ï¼Ÿãƒ›ã‚¹ãƒ†ã‚£ãƒ³ã‚°ã‚µãƒ¼ãƒ�ã�®ã‚¢ã‚«ã‚¦ãƒ³ãƒˆã‚’æŒ�ã�£ã�¦ã�„ã‚‹äººã�¯ã€�ã��ã�® ISP ã�ŒPython 3ã‚’ã�™ã�§ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�—ã�¦ã�„ã‚‹ã�‹ã‚‚ã�—ã‚Œã�ªã�„ã€‚ã‚‚ã�—è‡ªå®…ã�§Linuxã‚’ä½¿ã�£ã�¦ã�„ã‚‹ã�®ã�ªã‚‰ã€�å�Œæ§˜ã�«Python 3ã�Œã�™ã�§ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�•ã‚Œã�¦ã�„ã‚‹ã�‹ã‚‚ã�—ã‚Œã�ªã�„ã€‚ã�»ã�¨ã‚“ã�©ã�®æœ‰å��ã�ªGNU/Linuxãƒ‡ã‚£ã‚¹ãƒˆãƒªãƒ“ãƒ¥ãƒ¼ã‚·ãƒ§ãƒ³ã�«ã�¯ãƒ‡ãƒ•ã‚©ãƒ«ãƒˆã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�§Python 2ã�Œå°Žå…¥ã�•ã‚Œã�¦ã�„ã‚‹ã�Œã€�Python 3ã‚’å�«ã‚€ãƒ‡ã‚£ã‚¹ãƒˆãƒªãƒ“ãƒ¥ãƒ¼ã‚·ãƒ§ãƒ³ã‚‚å°‘ã�ªã�„ã�ªã�Œã‚‰å­˜åœ¨ã�—ã�¦ã�Šã‚Šã€�ã��ã�®æ•°ã�¯ã�—ã� ã�„ã�«å¢—ã�ˆã�¦ã��ã�¦ã�„ã‚‹ã€‚Mac OS Xã�«ã�¯ã‚³ãƒžãƒ³ãƒ‰ãƒ©ã‚¤ãƒ³ãƒ�ãƒ¼ã‚¸ãƒ§ãƒ³ã�®Python 2ã�Œå…¥ã�£ã�¦ã�„ã‚‹ã�Œã€�ã�„ã�¾ã�“ã‚Œã‚’æ›¸ã�„ã�¦ã�„ã‚‹æ™‚ç‚¹ã�§ã�¯Python 3ã�¯å…¥ã�£ã�¦ã�„ã�ªã�„ã€‚Microsoft Windowsã�«ã�¯ã€�ã�©ã�®ãƒ�ãƒ¼ã‚·ãƒ§ãƒ³ã�®Pythonã‚‚ä»˜å±žã�—ã�¦ã�„ã�ªã�„ã€‚ã�§ã‚‚ã€�è«¦ã‚�ã�ªã�„ã‚ˆã�†ã�«ï¼� ã�‚ã�ªã�Ÿã�Œã�©ã�®OSã‚’ä½¿ã�£ã�¦ã�„ã‚‹ã�¨ã�—ã�¦ã‚‚ã€�ãƒžã‚¦ã‚¹æ“�ä½œã� ã�‘ã�§Pythonã‚’ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�§ã��ã‚‹ã€‚ã�‚ã�ªã�Ÿã�®Linuxã‚„Mac OS Xã�«Python 3ã�Œå…¥ã�£ã�¦ã�„ã‚‹ã�‹ã�©ã�†ã�‹ã‚’ç¢ºèª�ã�™ã‚‹ã�«ã�¯ã€�ã‚³ãƒžãƒ³ãƒ‰ãƒ©ã‚¤ãƒ³ã‚’ä½¿ã�£ã�¦ã�¿ã‚‹ã�®ã�Œä¸€ç•ªç°¡å�˜ã� ã€‚Linuxã�®å ´å�ˆã�¯ã€�ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ãƒ¡ãƒ‹ãƒ¥ãƒ¼ã�‹ã‚‰ç«¯æœ«ã�¨å‘¼ã�°ã‚Œã‚‹ãƒ—ãƒ­ã‚°ãƒ©ãƒ ã‚’æŽ¢ã�—ã�¦ã�»ã�—ã�„ï¼ˆã‚‚ã�—ã�‹ã�—ã�Ÿã‚‰ã‚¢ã‚¯ã‚»ã‚µãƒªã‚„ã‚·ã‚¹ãƒ†ãƒ ã�¨ã�„ã�£ã�Ÿã‚µãƒ–ãƒ¡ãƒ‹ãƒ¥ãƒ¼ã�®ä¸­ã�«å…¥ã�£ã�¦ã�„ã‚‹ã�‹ã‚‚ï¼‰ã€‚Mac OS Xã�®å ´å�ˆã�¯ã€�/Application/Utilitiesãƒ•ã‚©ãƒ«ãƒ€ã�«Terminal.appã�¨ã�„ã�†ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã�Œå­˜åœ¨ã�™ã‚‹ã€‚ã‚³ãƒžãƒ³ãƒ‰ãƒ©ã‚¤ãƒ³ãƒ—ãƒ­ãƒ³ãƒ—ãƒˆã�Œè¡¨ç¤ºã�•ã‚Œã�Ÿã‚‰ã€�ã�Ÿã� python3ï¼ˆã�™ã�¹ã�¦å°�æ–‡å­—ã€�ç©ºç™½ã�ªã�—ï¼‰ã�¨å…¥åŠ›ã�—ã€�ä½•ã�Œèµ·ã��ã‚‹ã�‹ã‚’ç¢ºèª�ã�—ã�¦ã�»ã�—ã�„ã€‚ç§�ã�®è‡ªå®…ã�®Linuxã‚·ã‚¹ãƒ†ãƒ ã�«ã�¯ã�™ã�§ã�«Python 3ã�Œã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�•ã‚Œã�¦ã�„ã‚‹ã�®ã�§ã€�ã�“ã�®ã‚³ãƒžãƒ³ãƒ‰ã�«ã‚ˆã�£ã�¦ã€ŒPythonå¯¾è©±ã‚·ã‚§ãƒ«ã€�ã�Œèµ·å‹•ã�™ã‚‹ã€‚mark@atlantis:~$python3Python 3.0.1+ (r301:69556, Apr 15 2009, 17:25:52) [GCC 4.3.3] on linux2 Type 'help', 'copyright', 'credits' or 'license' for more information. >>>ï¼ˆPythonå¯¾è©±ã‚·ã‚§ãƒ«ã‚’çµ‚äº†ã�™ã‚‹ã�«ã�¯ã€�exit()ENTERã‚­ãƒ¼ã‚’æŠ¼ã��ã�†ï¼‰ç§�ã�® ã‚¦ã‚§ãƒ–ãƒ›ã‚¹ãƒ†ã‚£ãƒ³ã‚°ãƒ—ãƒ­ãƒ�ã‚¤ãƒ€ ã‚‚Linuxã�Œå‹•ä½œã�—ã�¦ã�„ã�¦ã€�ã‚³ãƒžãƒ³ãƒ‰ãƒ©ã‚¤ãƒ³ã�¸ã�®ã‚¢ã‚¯ã‚»ã‚¹ã�Œæ��ä¾›ã�•ã‚Œã�¦ã�„ã‚‹ã�Œã€�ã�“ã�®ã‚µãƒ¼ãƒ�ã�«ã�¯Python 3ã�Œã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�•ã‚Œã�¦ã�„ã�ªã�„ï¼ˆã�¡ã�‡ã�£ï¼�ï¼‰ã€‚mark@manganese:~$python3bash: python3: command not foundã�§ã�¯ã€�ã�“ã�®ç¯€ã�®åˆ�ã‚�ã�®è³ªå•�ã�¸æˆ»ã‚�ã�†ã€‚ã€Œã�©ã�®Pythonã‚’ã�¤ã�‹ã�ˆã�°è‰¯ã�„ã�®ã� ã‚�ã�†ã�‹ï¼Ÿã€� ã��ã�®ç­”ã�ˆã�¯ã€�ã€Œä½¿ã�£ã�¦ã�„ã‚‹ã‚³ãƒ³ãƒ”ãƒ¥ãƒ¼ã‚¿ã�§å‹•ä½œã�™ã‚‹ã�ªã‚‰ã�©ã‚Œã�§ã‚‚è‰¯ã�„ã€�ã� ã€‚⁂Microsoft Windowsã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹Windowsã�¯ç�¾åœ¨ã€�32ãƒ“ãƒƒãƒˆç‰ˆã�¨64ãƒ“ãƒƒãƒˆç‰ˆã�®2ã�¤ã�®ã‚¢ãƒ¼ã‚­ãƒ†ã‚¯ãƒ�ãƒ£ã�§æ��ä¾›ã�•ã‚Œã�¦ã�„ã‚‹ã€‚ã‚‚ã�¡ã‚�ã‚“Windowsã�«ã�¯ã�Ÿã��ã�•ã‚“ã�®ç•°ã�ªã‚‹ã€Œãƒ�ãƒ¼ã‚¸ãƒ§ãƒ³ã€�ã€�ã�™ã�ªã‚�ã�¡XP, Vista, Windows 7ã�Œå­˜åœ¨ã�™ã‚‹ã�Œã€�Pythonã�¯ã�“ã�®ä¸­ã�®ã�©ã‚Œã�®ä¸Šã�§ã‚‚å‹•ä½œã�™ã‚‹ã€‚ã��ã‚Œã‚ˆã‚Šã‚‚ã€�32ãƒ“ãƒƒãƒˆã�¨64ãƒ“ãƒƒãƒˆã�®ã�©ã�¡ã‚‰ã�§ã�‚ã‚‹ã�‹ã�®æ–¹ã�Œé‡�è¦�ã� ã€‚ã‚‚ã�—å®Ÿè¡Œã�—ã�¦ã�„ã‚‹ã‚¢ãƒ¼ã‚­ãƒ†ã‚¯ãƒ�ãƒ£ã�Œã�©ã�¡ã‚‰ã�ªã�®ã�‹åˆ†ã�‹ã‚‰ã�ªã�„ã�ªã‚‰ã€�ã�Šã��ã‚‰ã��32ãƒ“ãƒƒãƒˆã�®æ–¹ã� ã‚�ã�†ã€‚python.org/download/ ã‚’è¨ªã‚Œã€�ã‚¢ãƒ¼ã‚­ãƒ†ã‚¯ãƒ�ãƒ£ã�«å�ˆã�£ã�ŸPython 3ã�®Windowsç”¨ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã‚’ãƒ€ã‚¦ãƒ³ãƒ­ãƒ¼ãƒ‰ã�—ã�¦æ¬²ã�—ã�„ã€‚æ¬¡ã�®ã‚ˆã�†ã�ªã‚‚ã�®ã‚’é�¸ã�¶ã�“ã�¨ã�«ã�ªã‚‹ã� ã‚�ã�†ï¼šPython 3.1 Windows installer (Windows binary — does not include source)Python 3.1 Windows AMD64 installer (Windows AMD64 binary — does not include source)ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã‚’ç›´æŽ¥ãƒ€ã‚¦ãƒ³ãƒ­ãƒ¼ãƒ‰ã�™ã‚‹ã�Ÿã‚�ã�®ãƒªãƒ³ã‚¯ã�¯ã�“ã�“ã�«æ›¸ã�‹ã�ªã�„ã�§ã�Šã��ã�Ÿã�„ã€‚ã�¨ã�„ã�†ã�®ã�¯ã€�Pythonã�®ãƒžã‚¤ãƒŠãƒ¼ã‚¢ãƒƒãƒ—ãƒ‡ãƒ¼ãƒˆã�¯æ—¥å¸¸èŒ¶é£¯äº‹ã�§ã�‚ã‚Šã€�ã�‚ã�ªã�Ÿã�Œé‡�è¦�ã�ªã‚¢ãƒƒãƒ—ãƒ‡ãƒ¼ãƒˆã‚’é€ƒã�™ã�“ã�¨ã�«ã�ªã�£ã�¦ã‚‚è²¬ä»»ã�Œã�¨ã‚Œã�ªã�„ã�‹ã‚‰ã� ã€‚ä½•ã�‹æ·±é� ã�ªã‚‹æ„�å›³ã�Œã�‚ã‚‹å ´å�ˆã�¯åˆ¥ã�¨ã�—ã�¦ã€�å¸¸ã�«æœ€æ–°ãƒ�ãƒ¼ã‚·ãƒ§ãƒ³ã�® Python 3.x ã‚’ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹ã�®ã�Œã‚ˆã�„ã� ã‚�ã�†ã€‚ãƒ€ã‚¦ãƒ³ãƒ­ãƒ¼ãƒ‰ã�Œå®Œäº†ã�—ã�Ÿã‚‰.msiãƒ•ã‚¡ã‚¤ãƒ«ã‚’ãƒ€ãƒ–ãƒ«ã‚¯ãƒªãƒƒã‚¯ã�—ã‚ˆã�†ã€‚å®Ÿè¡Œå�¯èƒ½ãƒ•ã‚¡ã‚¤ãƒ«ã‚’å®Ÿè¡Œã�—ã‚ˆã�†ã�¨ã�—ã�¦ã�„ã‚‹ã�®ã�§ã€�Windowsã�¯ã‚»ã‚­ãƒ¥ãƒªãƒ†ã‚£è­¦å‘Šã‚’è¡¨ç¤ºã�™ã‚‹ã� ã‚�ã�†ã€‚å…¬å¼�ã�®Pythonã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�¯ã€�Pythonã�®é–‹ç™ºã‚’ç›£ç�£ã�—ã�¦ã�„ã‚‹é�žå–¶åˆ©ä¼�æ¥­ã�® Python Software Foundation ã�«ã‚ˆã�£ã�¦ãƒ‡ã‚£ã‚¸ã‚¿ãƒ«ç½²å��ã�•ã‚Œã�¦ã�„ã‚‹ã€‚å�½ç‰©ã‚’å®Ÿè¡Œã�•ã�›ã�Ÿã‚‰ãƒ€ãƒ¡ã� ã‚ˆï¼�å®Ÿè¡Œãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦Python 3ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã‚’èµ·å‹•ã�—ã‚ˆã�†ã€‚ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�®æœ€åˆ�ã�®è³ªå•�ã�¯ã€�Python 3ã‚’ã�™ã�¹ã�¦ã�®ãƒ¦ãƒ¼ã‚¶ã�®ã�Ÿã‚�ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹ã�®ã�‹ã€�ã�‚ã�ªã�Ÿã� ã�‘ã�®ã�Ÿã‚�ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹ã�®ã�‹ã‚’é�¸æŠžã�™ã‚‹ã‚‚ã�®ã� ã€‚ãƒ‡ãƒ•ã‚©ãƒ«ãƒˆã�§ã�¯ “install for all users“ ã�Œé�¸æŠžã�•ã‚Œã�¦ã�„ã�¦ã€�åˆ¥æ®µä½•ã�‹ç�†ç”±ã�Œã�ªã�‘ã‚Œã�°ã�“ã‚Œã�Œæœ€é�©ã�ªé�¸æŠžã� ï¼ˆ“install just for me” ã‚’é�¸ã�¶ç�†ç”±ã�®1ã�¤ã�¨ã�—ã�¦ã�¯ã€�ä¼šç¤¾ã�®ã‚³ãƒ³ãƒ”ãƒ¥ãƒ¼ã‚¿ã�«Pythonã‚’ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�—ã‚ˆã�†ã�¨ã�—ã�¦ã�„ã‚‹ã�Œã€�ã�‚ã�ªã�Ÿã�®Windowsã‚¢ã‚«ã‚¦ãƒ³ãƒˆã�«ã�¯ç®¡ç�†è€…æ¨©é™�ã�Œä¸Žã�ˆã‚‰ã‚Œã�¦ã�„ã�ªã�„ã�¨ã�„ã�†çŠ¶æ³�ã�Œè€ƒã�ˆã‚‰ã‚Œã‚‹ã€‚ã�—ã�‹ã�—ã�ªã�œä¼šç¤¾ã�®Windowsç®¡ç�†è€…ã�®è¨±å�¯ã‚’å¾—ã�šã�«Pythonã‚’ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�—ã‚ˆã�†ã�¨ã�—ã�¦ã�„ã‚‹ã‚“ã� ã‚�ã�†ã€‚ç§�ã‚’ãƒˆãƒ©ãƒ–ãƒ«ã�«å·»ã��è¾¼ã�¾ã�ªã�„ã�§ã��ã‚Œã‚ˆï¼�ï¼‰ã€‚æ¬¡ã�¸ãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦ã€�é�¸æŠžã�—ã�Ÿã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�®ç¨®é¡žã‚’ç¢ºå®šã�—ã‚ˆã�†ã€‚ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�¯æ¬¡ã�«ã€�ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«å…ˆã�®ãƒ‡ã‚£ãƒ¬ã‚¯ãƒˆãƒªã‚’é�¸æŠžã�™ã‚‹ã‚ˆã�†ã�«æŒ‡ç¤ºã�—ã�¦ã��ã‚‹ã€‚Python 3.1.xã�®ã�™ã�¹ã�¦ã�®ãƒ�ãƒ¼ã‚¸ãƒ§ãƒ³ã�§ã�¯ã€�ã��ã�®ãƒ‡ãƒ•ã‚©ãƒ«ãƒˆå€¤ã�¯C:\Python31\ã�«ã�ªã�£ã�¦ã�„ã‚‹ã€‚ã�“ã‚Œã‚’å¤‰æ›´ã�™ã‚‹ç‰¹åˆ¥ã�®ç�†ç”±ã�Œã�ªã�„é™�ã‚Šã€�ã�»ã�¨ã‚“ã�©ã�®ãƒ¦ãƒ¼ã‚¶ã�¯ã�“ã�®ã�¾ã�¾ã�®è¨­å®šã�§ã�†ã�¾ã��ã�„ã��ã�¯ã�šã� ã€‚ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã‚’ä»–ã�®ãƒ‰ãƒ©ã‚¤ãƒ–ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�—ã�¦ã�„ã‚‹äººã�¯ã€�åŸ‹ã‚�è¾¼ã�¿ã�®ãƒ•ã‚¡ã‚¤ãƒ«ãƒ–ãƒ©ã‚¦ã‚¶ã‚’ä½¿ã�£ã�¦ã��ã�®å ´æ‰€ã�¾ã�§ç§»å‹•ã�™ã‚‹ã�‹ã€�ã�‚ã‚‹ã�„ã�¯ã��ã�®ä¸‹ã�®ãƒœãƒƒã‚¯ã‚¹ã�«ãƒ‘ã‚¹å��ã‚’ç›´æŽ¥å…¥åŠ›ã�—ã�¦ã�»ã�—ã�„ã€‚åˆ¥ã�«Pythonã�®ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«å…ˆã�¯C:ãƒ‰ãƒ©ã‚¤ãƒ–ã�«åˆ¶é™�ã�•ã‚Œã�¦ã�Šã‚‰ã�šã€�ä»»æ„�ã�®ãƒ‰ãƒ©ã‚¤ãƒ–ã�®ä»»æ„�ã�®ãƒ•ã‚©ãƒ«ãƒ€ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�§ã��ã‚‹ã€‚æ¬¡ã�¸ ãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«å…ˆã�®ãƒ‡ã‚£ãƒ¬ã‚¯ãƒˆãƒªã‚’ç¢ºå®šã�™ã‚‹ã€‚æ¬¡ã�®ãƒšãƒ¼ã‚¸ã�¯è¤‡é›‘ã��ã�†ã�«è¦‹ã�ˆã‚‹ã�Œã€�å®Ÿã�¯ã��ã�†ã�§ã‚‚ã�ªã�„ã€‚ä»–ã�®å¤šã��ã�®ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�¨å�Œæ§˜ã�«ã€�Python 3ã‚’æ§‹æˆ�ã�™ã‚‹å€‹ã€…ã�®ã‚³ãƒ³ãƒ�ãƒ¼ãƒ�ãƒ³ãƒˆã�«ã�¤ã�„ã�¦ã€�ã��ã‚Œã‚’ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�—ã�ªã�„ã�¨ã�„ã�†é�¸æŠžã�Œã�§ã��ã‚‹ã€‚ã‚‚ã�—ãƒ‡ã‚£ã‚¹ã‚¯ã‚¹ãƒšãƒ¼ã‚¹ã�®ç©ºã��ã�Œé�žå¸¸ã�«å°‘ã�ªã�„ã�®ã�§ã�‚ã‚Œã�°ã€�ç‰¹å®šã�®ã‚³ãƒ³ãƒ�ãƒ¼ãƒ�ãƒ³ãƒˆã‚’é™¤å¤–ã�§ã��ã‚‹ã€‚Register Extensionsã�¯ã€�Pythonã‚¹ã‚¯ãƒªãƒ—ãƒˆ (.py ãƒ•ã‚¡ã‚¤ãƒ«) ã‚’ãƒ€ãƒ–ãƒ«ã‚¯ãƒªãƒƒã‚¯ã�§å®Ÿè¡Œã�§ã��ã‚‹ã‚ˆã�†ã�«ã�™ã‚‹ã€‚æœ‰åŠ¹ã�«ã�—ã�¦ã�Šã��ã�“ã�¨ã‚’å¥¨ã‚�ã‚‹ã�Œå¿…é ˆã�§ã�¯ã�ªã�„ï¼ˆã�Ÿã� ã�—ã�“ã�®ã‚ªãƒ—ã‚·ãƒ§ãƒ³ã�¯ãƒ‡ã‚£ã‚¹ã‚¯ã‚¹ãƒšãƒ¼ã‚¹ã‚’è¦�æ±‚ã�—ã�ªã�„ã�®ã�§ã€�ã�‚ã�ˆã�¦ã�“ã‚Œã‚’é™¤å¤–ã�™ã‚‹ç�†ç”±ã�¯ã�»ã�¨ã‚“ã�©ã�ªã�„ï¼‰ã€‚Tcl/Tkã�¯ã€�Pythonã‚·ã‚§ãƒ«ã�«ã‚ˆã�£ã�¦ä½¿ã‚�ã‚Œã�¦ã�„ã‚‹Pythonã�®ã‚°ãƒ©ãƒ•ã‚£ãƒƒã‚¯ãƒ©ã‚¤ãƒ–ãƒ©ãƒªã� ã€‚ã�“ã�®Pythonã‚·ã‚§ãƒ«ã�¯ã�“ã�®æœ¬ã‚’é€šã�—ã�¦ä½¿ã�†ã�“ã�¨ã�«ã�ªã‚‹ã€‚ã�“ã�®ã‚ªãƒ—ã‚·ãƒ§ãƒ³ã�¯æœ‰åŠ¹ã�«ã�—ã�¦ã�Šã��ã�“ã�¨ã‚’å¼·ã��å¥¨ã‚�ã‚‹ã€‚Documentationã�¯ã€� docs.python.org ã�«ã�‚ã‚‹ã�»ã�¨ã‚“ã�©ã�®æƒ…å ±ã‚’å�«ã‚“ã� ãƒ˜ãƒ«ãƒ—ãƒ•ã‚¡ã‚¤ãƒ«ã� ã€‚ãƒ€ã‚¤ã‚¢ãƒ«ã‚¢ãƒƒãƒ—å›žç·šã‚„åˆ¶é™�ã�•ã‚Œã�Ÿã‚¤ãƒ³ã‚¿ãƒ¼ãƒ�ãƒƒãƒˆæŽ¥ç¶šã‚’ä½¿ã�£ã�¦ã�„ã‚‹ã�®ã�§ã�‚ã‚Œã�°æœ‰åŠ¹ã�«ã�—ã�¦ã�Šã��ã�“ã�¨ã‚’å¥¨ã‚�ã‚‹ã€‚Utility Scriptsã�¯2to3.pyã‚’å�«ã‚“ã�§ã�„ã‚‹ã€‚ã�“ã‚Œã�®ä½¿ã�„æ–¹ã�¯ ã�“ã�®æœ¬ã�®å¾Œã�®ç«  ã�§å­¦ã�¶ã�“ã�¨ã�«ã�ªã‚‹ã€‚ã‚‚ã�—Python 2ã�®æ—¢å­˜ã�®ã‚³ãƒ¼ãƒ‰ã‚’Python 3ã�¸ç§»è¡Œã�™ã‚‹æ–¹æ³•ã‚’å­¦ã�³ã�Ÿã�„ã�®ã�§ã�‚ã‚Œã�°ã�“ã�®ã‚ªãƒ—ã‚·ãƒ§ãƒ³ã�¯å¿…è¦�ã� ã€‚Python 2ã�®ã‚³ãƒ¼ãƒ‰ã‚’æŒ�ã�£ã�¦ã�„ã�ªã�„ã�®ã�§ã�‚ã‚Œã�°ã�“ã�®ã‚ªãƒ—ã‚·ãƒ§ãƒ³ã�¯ç„¡åŠ¹ã�«ã�—ã�¦ã‚‚ã‚ˆã�„ã€‚Test Suiteã�¯ã€�Pythonã�®ã‚¤ãƒ³ã‚¿ãƒ—ãƒªã‚¿è‡ªä½“ã‚’ãƒ†ã‚¹ãƒˆã�™ã‚‹ã�Ÿã‚�ã�®ã‚¹ã‚¯ãƒªãƒ—ãƒˆç¾¤ã� ã€‚ã�“ã�®æœ¬ã�§ã�“ã‚Œã‚’ä½¿ã�†æ©Ÿä¼šã�¯ã�ªã�„ã�—ã€�ç§�ã�Œãƒ—ãƒ­ã‚°ãƒ©ãƒŸãƒ³ã‚°ã‚’ã�™ã‚‹ã�¨ã��ã�«ã�“ã‚Œã‚’ä½¿ã�£ã�Ÿã�“ã�¨ã‚‚ã�ªã�„ã€‚ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹ã�‹ã�©ã�†ã�‹ã�¯å®Œå…¨ã�«ä»»æ„�ã� ã€‚ãƒ‡ã‚£ã‚¹ã‚¯ã‚¹ãƒšãƒ¼ã‚¹ã�«ã�©ã‚Œã��ã‚‰ã�„ã�®ç©ºã��ã�Œã�‚ã‚‹ã�‹ã�Œä¸�å®‰ã�§ã�‚ã‚Œã�°ã€�Disk Usageãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�™ã‚‹ã�¨ã‚ˆã�„ã€‚ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�Œãƒ‰ãƒ©ã‚¤ãƒ–ãƒ¬ã‚¿ãƒ¼ã�®ä¸€è¦§ã‚’è¡¨ç¤ºã�—ã€�å�„ãƒ‡ã‚£ã‚¹ã‚¯ã�®ç�¾åœ¨ã�®ç©ºã��ã‚¹ãƒšãƒ¼ã‚¹ã�¨ã€�ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«å¾Œã�®ç©ºã��ã‚¹ãƒšãƒ¼ã‚¹ã‚’è¨ˆç®—ã�—ã�¦ã��ã‚Œã‚‹ã€‚OKãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦ã€�“Customizing Python” ãƒšãƒ¼ã‚¸ã�«æˆ»ã‚�ã�†ã€‚é™¤å¤–ã�—ã�Ÿã�„ã‚ªãƒ—ã‚·ãƒ§ãƒ³ã�Œã�‚ã‚‹å ´å�ˆã�¯ã€�ã��ã�®ã‚ªãƒ—ã‚·ãƒ§ãƒ³ã�®å‰�ã�«ã�‚ã‚‹ãƒ‰ãƒ­ãƒƒãƒ—ãƒ€ã‚¦ãƒ³ãƒœã‚¿ãƒ³ã‚’æŠ¼ã�—ã�¦ã€�'Entire feature will be unavailable' ã‚’é�¸æŠžã�—ã‚ˆã�†ã€‚ä¾‹ã�ˆã�°ãƒ†ã‚¹ãƒˆã‚¹ã‚¤ãƒ¼ãƒˆã‚’é™¤å¤–ã�™ã‚‹ã�¨ã€�7908 KB ã�¨ã�„ã�†ã�‹ã�ªã‚Šã�®ãƒ‡ã‚£ã‚¹ã‚¯ã‚¹ãƒšãƒ¼ã‚¹ã�Œç¯€ç´„ã�§ã��ã‚‹ã€‚æ¬¡ã�¸ãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦é�¸æŠžã‚’ç¢ºå®šã�—ã‚ˆã�†ã€‚ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�¯ã€�ã�™ã�¹ã�¦ã�®å¿…è¦�ã�ªãƒ•ã‚¡ã‚¤ãƒ«ã‚’é�¸æŠžã�—ã�Ÿã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«å…ˆãƒ‡ã‚£ãƒ¬ã‚¯ãƒˆãƒªã�«ã‚³ãƒ”ãƒ¼ã�™ã‚‹ï¼ˆã�“ã‚Œã�¯æœ¬å½“ã�«ä¸€çž¬ã�§çµ‚ã‚�ã‚‹ã€‚ã‚¹ã‚¯ãƒªãƒ¼ãƒ³ã‚·ãƒ§ãƒƒãƒˆã‚’æ’®å½±ã�™ã‚‹ã�®ã�«ä¸‰å›žã‚‚æŒ‘æˆ¦ã�™ã‚‹ç¾½ç›®ã�«ã�ªã�£ã�Ÿã��ã‚‰ã�„ã� ï¼�ï¼‰ã€‚çµ‚äº†ãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã‚’çµ‚äº†ã�—ã‚ˆã�†ã€‚ã‚¹ã‚¿ãƒ¼ãƒˆãƒ¡ãƒ‹ãƒ¥ãƒ¼ã�®ä¸­ã�«ã€�Python 3.1ã�¨ã�„ã�†æ–°ã�—ã�„ã‚¢ã‚¤ãƒ†ãƒ ã�Œã�‚ã‚‹ã�¯ã�šã� ã€‚ã��ã�®ä¸­ã�« IDLE ã�¨ã�„ã�†ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã�Œã�‚ã‚‹ã€‚ã�“ã‚Œã‚’é�¸æŠžã�—ã�¦Pythonå¯¾è©±ã‚·ã‚§ãƒ«ã‚’èµ·å‹•ã�—ã‚ˆã�†ã€‚⁂Mac OS Xã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹æœ€è¿‘ã�®ã�™ã�¹ã�¦ã�®Macintoshã‚³ãƒ³ãƒ”ãƒ¥ãƒ¼ã‚¿ã�¯ï¼ˆã�»ã�¨ã‚“ã�©ã�®Windows PCã�¨å�Œæ§˜ã�«ï¼‰Intelãƒ�ãƒƒãƒ—ã‚’ä½¿ã�£ã�¦ã�„ã‚‹ã€‚ã�‹ã�¤ã�¦ã�®Macã�¯PowerPCãƒ�ãƒƒãƒ—ã‚’ä½¿ã�£ã�¦ã�„ã�Ÿã€‚ã�‚ã�ªã�Ÿã�Œã�“ã�®é�•ã�„ã‚’æ°—ã�«ã�™ã‚‹å¿…è¦�ã�¯ã�ªã�„ã€‚ã�¨ã�„ã�†ã�®ã‚‚ã€�ï¼‘ã�¤ã�®Macç”¨Pythonã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã� ã�‘ã�§ã�™ã�¹ã�¦ã�®Macã�«å¯¾å¿œã�§ã��ã‚‹ã‚ˆã�†ã�«ã�ªã�£ã�¦ã�„ã‚‹ã�‹ã‚‰ã� ã€‚python.org/download/ ã�¸è¡Œã��ã€�Macç”¨ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã‚’ãƒ€ã‚¦ãƒ³ãƒ­ãƒ¼ãƒ‰ã�—ã‚ˆã�†ã€‚ãƒ�ãƒ¼ã‚¸ãƒ§ãƒ³ç•ªå�·ã�¯é�•ã�†ã�‹ã‚‚ã�—ã‚Œã�ªã�„ã�Œã€�ã�“ã‚Œã�¯Python 3.1 Mac Installer Disk Imageã�ªã�©ã�¨æ›¸ã�‹ã‚Œã�¦ã�„ã‚‹ã�¯ã�šã� ã€‚ãƒ�ãƒ¼ã‚¸ãƒ§ãƒ³2.xç³»ã�§ã�¯ã�ªã��ã€�3.xç³»ã‚’ãƒ€ã‚¦ãƒ³ãƒ­ãƒ¼ãƒ‰ã�™ã‚‹ã�“ã�¨ã�«æ³¨æ„�ã�—ã‚ˆã�†ã€‚ã�Šã��ã‚‰ã��ãƒ–ãƒ©ã‚¦ã‚¶ã�¯ã€�ãƒ‡ã‚£ã‚¹ã‚¯ã‚¤ãƒ¡ãƒ¼ã‚¸ã‚’è‡ªå‹•çš„ã�«ãƒžã‚¦ãƒ³ãƒˆã�—ã€�Finderã�®ã‚¦ã‚£ãƒ³ãƒ‰ã‚¦ã‚’é–‹ã�„ã�¦å†…å®¹ã‚’è¡¨ç¤ºã�™ã‚‹ã� ã‚�ã�†ï¼ˆã‚‚ã�—ã��ã�†ã�ªã‚‰ã�ªã�‘ã‚Œã�°ã€�ãƒ€ã‚¦ãƒ³ãƒ­ãƒ¼ãƒ‰ãƒ•ã‚©ãƒ«ãƒ€ã�«ã�‚ã‚‹ãƒ‡ã‚£ã‚¹ã‚¯ã‚¤ãƒ¡ãƒ¼ã‚¸ã‚’è¦‹ã�¤ã�‘ã€�ã��ã‚Œã‚’ãƒ€ãƒ–ãƒ«ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦ãƒžã‚¦ãƒ³ãƒˆã�™ã‚‹å¿…è¦�ã�Œã�‚ã‚‹ã€‚ãƒ‡ã‚£ã‚¹ã‚¯ã‚¤ãƒ¡ãƒ¼ã‚¸ã�¯python-3.1.dmgã�®ã‚ˆã�†ã�ªå��å‰�ã�§ã�‚ã‚‹ã�¯ã�šã� ï¼‰ã€‚ã�“ã�®ãƒ‡ã‚£ã‚¹ã‚¯ã‚¤ãƒ¡ãƒ¼ã‚¸ã�¯ã€�ã�„ã��ã�¤ã�‹ã�®ãƒ†ã‚­ã‚¹ãƒˆãƒ•ã‚¡ã‚¤ãƒ« (Build.txtã€�License.txtã€�ReadMe.txt) ã�¨ã€�å®Ÿéš›ã�®ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ã�§ã�‚ã‚‹Python.mpkgã‚’å�«ã‚“ã�§ã�„ã‚‹ã€‚ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸Python.mpkgã‚’ãƒ€ãƒ–ãƒ«ã‚¯ãƒªãƒƒã‚¯ã�™ã‚‹ã�¨ã€�Macç”¨ã�®Pythonã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�Œèµ·å‹•ã�™ã‚‹ã€‚ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�®æœ€åˆ�ã�®ãƒšãƒ¼ã‚¸ã�¯Pythonè‡ªä½“ã�®ç°¡å�˜ã�ªèª¬æ˜Žã� ã€‚è©³ç´°ã‚’çŸ¥ã‚Šã�Ÿã�„å ´å�ˆã�¯ReadMe.txtãƒ•ã‚¡ã‚¤ãƒ«ã‚’èª­ã‚“ã�§ã�»ã�—ã�„ï¼ˆã�¾ã� èª­ã‚“ã�§ã�„ã�ªã�„ã‚ˆã�­ï¼Ÿï¼‰ã�¨æ›¸ã�‹ã‚Œã�¦ã�„ã‚‹ã€‚ç¶šã�‘ã‚‹ ãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦å…ˆã�¸é€²ã‚‚ã�†ã€‚æ¬¡ã�®ãƒšãƒ¼ã‚¸ã�¯å®Ÿã�¯é‡�è¦�ã�ªæƒ…å ±ã‚’å�«ã‚“ã�§ã�„ã‚‹ã€‚ã€ŒPythonã‚’å‹•ã�‹ã�™ã�«ã�¯Mac OS X 10.3ä»¥é™�ã�Œå¿…è¦�ã�§ã�™ã€�ã�¨ã�„ã�†ã‚‚ã�®ã� ã€‚ã�¾ã� Mac OS X 10.2ã‚’ä½¿ã�£ã�¦ã�„ã‚‹ã�®ã�ªã‚‰ã€�æ—©ã��ã‚¢ãƒƒãƒ—ã‚°ãƒ¬ãƒ¼ãƒ‰ã�—ã�Ÿã�»ã�†ã�Œã�„ã�„ã€‚Appleã�¯ã€�ã�“ã‚Œã�®ã‚»ã‚­ãƒ¥ãƒªãƒ†ã‚£ã‚¢ãƒƒãƒ—ãƒ‡ãƒ¼ãƒˆã‚’ã�™ã�§ã�«çµ‚äº†ã�—ã�¦ã�„ã�¦ã€�ã‚³ãƒ³ãƒ”ãƒ¥ãƒ¼ã‚¿ã‚’ã‚ªãƒ³ãƒ©ã‚¤ãƒ³ã�«ã�™ã‚‹ã�®ã�¯å�±é™ºã‚’ä¼´ã�†ã€‚åŠ ã�ˆã�¦ã€�Python 3ã‚’å®Ÿè¡Œã�™ã‚‹ã�“ã�¨ã‚‚ã�§ã��ã�ªã�„ã€‚ç¶šã�‘ã‚‹ãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦å…ˆã�¸é€²ã‚€ã€‚ã�™ã�¹ã�¦ã�®å„ªã‚Œã�Ÿã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�Œã��ã�†ã�§ã�‚ã‚‹ã‚ˆã�†ã�«ã€�Pythonã�®ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã‚‚ã‚½ãƒ•ãƒˆã‚¦ã‚¨ã‚¢ä½¿ç”¨è¨±è«¾å¥‘ç´„ã‚’è¡¨ç¤ºã�™ã‚‹ã€‚Pythonã�¯ã‚ªãƒ¼ãƒ—ãƒ³ã‚½ãƒ¼ã‚¹ã�§ã�‚ã‚Šã€�ã��ã�®ãƒ©ã‚¤ã‚»ãƒ³ã‚¹ã�¯ Open Source Initiative ã�®èª�å�¯ã‚’å�—ã�‘ã�¦ã�„ã‚‹ã€‚Pythonã�®æ­´å�²ã�«ã�¯æ•°ã€…ã�®æ¨©åˆ©è€…ã‚„ã‚¹ãƒ�ãƒ³ã‚µãƒ¼ã�Œå­˜åœ¨ã�—ã�¦ã�„ã�¦ã€�å½¼ã‚‰ã�¯çš†ã€�ã�“ã�®ã‚½ãƒ•ãƒˆã‚¦ã‚¨ã‚¢ãƒ©ã‚¤ã‚»ãƒ³ã‚¹ã�«å��å‰�ã‚’æ®‹ã�—ã�¦ã�„ã‚‹ã€‚ã�—ã�‹ã�—ã€�ç�¾åœ¨ã�«ã�Šã�„ã�¦ã‚‚ã�ªã�ŠPythonã�¯ã‚ªãƒ¼ãƒ—ãƒ³ã‚½ãƒ¼ã‚¹ã�§ã�‚ã‚Šã€�ã�©ã�®ãƒ—ãƒ©ãƒƒãƒˆãƒ•ã‚©ãƒ¼ãƒ ã�§ã‚‚ã€�ã�©ã‚“ã�ªåˆ©ç”¨ç›®çš„ã�§ã‚‚ã€�æ–™é‡‘ã‚„ä»£å„Ÿçš„ã�ªç¾©å‹™ã�ªã�—ã�«ä½¿ç”¨ã�§ã��ã‚‹ã€‚ç¶šã�‘ã‚‹ãƒœã‚¿ãƒ³ã‚’ã‚‚ã�†ä¸€åº¦ã‚¯ãƒªãƒƒã‚¯ã�—ã‚ˆã�†ã€‚Appleã�®æ¨™æº–ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ãƒ•ãƒ¬ãƒ¼ãƒ ãƒ¯ãƒ¼ã‚¯ã�Œå¥‡å¦™ã�ªä½œã‚Šã‚’ã�—ã�¦ã�„ã‚‹ã�›ã�„ã�§ã€�ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã‚’å®Œäº†ã�™ã‚‹ã�«ã�¯ã‚½ãƒ•ãƒˆã‚¦ã‚¨ã‚¢å¥‘ç´„ã�«ã€Œå�Œæ„�ã€�ã�—ã�ªã�‘ã‚Œã�°ã�ªã‚‰ã�ªã�„ã€‚Pythonã�¯ã‚ªãƒ¼ãƒ—ãƒ³ã‚½ãƒ¼ã‚¹ã�ªã�®ã�§ã€�æ¨©åˆ©ã‚’å¥ªã‚�ã‚Œã‚‹ã�¨ã�„ã�†ã‚ˆã‚Šã€�ã‚€ã�—ã‚�æ›´ã�ªã‚‹æ¨©åˆ©ã‚’å�—ã�‘å�–ã‚‹ã�“ã�¨ã�«ã€Œå�Œæ„�ã€�ã�™ã‚‹ã�“ã�¨ã�«ã�ªã‚‹ã€‚å�Œæ„�ã�™ã‚‹ã‚’æŠ¼ã�—ã�¦æ¬¡ã�¸é€²ã‚‚ã�†ã€‚æ¬¡ã�®ç”»é�¢ã�§ã�¯ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹å ´æ‰€ã‚’å¤‰æ›´ã�§ã��ã‚‹ã€‚Pythonã�¯èµ·å‹•ãƒ‰ãƒ©ã‚¤ãƒ–ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�—ã�ªã�‘ã‚Œã�°ã�ªã‚‰ã�ªã�„ã�®ã� ã�Œã€�ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�®åˆ¶ç´„ã�«ã‚ˆã�£ã�¦ã�“ã‚Œã�Œå¼·åˆ¶ã�•ã‚Œã�ªã�„ã€‚å®Ÿéš›ã�®ã�¨ã�“ã‚�ã€�ç§�ã�Œã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«å…ˆã‚’å¤‰æ›´ã�™ã‚‹å¿…è¦�ã�«è¿«ã‚‰ã‚Œã�Ÿã�“ã�¨ã�¯ã�ªã�„ã€‚ã�“ã�®ç”»é�¢ã�‹ã‚‰ã�¯ã€�ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«è¨­å®šã‚’ã‚«ã‚¹ã‚¿ãƒžã‚¤ã‚ºã�—ã�¦ç‰¹å®šã�®æ©Ÿèƒ½ã‚’é™¤å¤–ã�™ã‚‹ã�“ã�¨ã‚‚ã�§ã��ã‚‹ã€‚ã‚«ã‚¹ã‚¿ãƒžã‚¤ã‚ºã�—ã�Ÿã�„å ´å�ˆã�¯Customizeãƒœã‚¿ãƒ³ã‚’ã€�ã��ã�†ã�§ã�ªã�‘ã‚Œã�°Installãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã‚ˆã�†ã€‚ã‚«ã‚¹ã‚¿ãƒ ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã‚’é�¸æŠžã�—ã�Ÿå ´å�ˆã�¯ã€�ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�¯ã€�ä»¥ä¸‹ã�®æ©Ÿèƒ½ã�®ä¸€è¦§ã‚’è¡¨ç¤ºã�™ã‚‹ï¼šPython Frameworkã€‚ã�“ã‚Œã�¯Pythonæœ¬ä½“ã� ã€‚å¿…ã�šã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�—ã�ªã�‘ã‚Œã�°ã�„ã�‘ã�ªã�„ã�®ã�§ã€�ãƒ�ã‚§ãƒƒã‚¯ãƒœãƒƒã‚¯ã‚¹ã�¯é�¸æŠžã�•ã‚Œã�ŸçŠ¶æ…‹ã�§å¤‰æ›´ã�§ã��ã�ªã�„ã‚ˆã�†ã�«ã�•ã‚Œã�¦ã�„ã‚‹ã€‚GUI Applicationsã�¯ã€�ã‚°ãƒ©ãƒ•ã‚£ã‚«ãƒ«ã�ªPythonã‚·ã‚§ãƒ«ã�®IDLEã‚’å�«ã‚“ã�§ã�„ã‚‹ã€‚IDLEã�¯ã�“ã�®æœ¬ã‚’é€šã�—ã�¦ä½¿ã�†ã�“ã�¨ã�«ã�ªã‚‹ã€‚ã�“ã�®ã‚ªãƒ—ã‚·ãƒ§ãƒ³ã�¯æœ‰åŠ¹ã�«ã�—ã�¦ã�Šã��ã�“ã�¨ã‚’å¼·ã��å¥¨ã‚�ã‚‹ã€‚UNIX command-line toolsã�¯ã€�ã‚³ãƒžãƒ³ãƒ‰ãƒ©ã‚¤ãƒ³ã�®python3ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã‚’å�«ã‚“ã�§ã�„ã‚‹ã€‚ã�“ã‚Œã‚‚ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹ã�“ã�¨ã‚’å¼·ã��å¥¨ã‚�ã‚‹ã€‚Python Documentationã�¯ã€� docs.python.org ã�«ã�‚ã‚‹ã�»ã�¨ã‚“ã�©ã�®æƒ…å ±ã‚’å�«ã‚€ãƒ˜ãƒ«ãƒ—ãƒ•ã‚¡ã‚¤ãƒ«ã� ã€‚ãƒ€ã‚¤ã‚¢ãƒ«ã‚¢ãƒƒãƒ—å›žç·šã‚„åˆ¶é™�ã�•ã‚Œã�Ÿã‚¤ãƒ³ã‚¿ãƒ¼ãƒ�ãƒƒãƒˆæŽ¥ç¶šã‚’ä½¿ã�£ã�¦ã�„ã‚‹ã�®ã�§ã�‚ã‚Œã�°æœ‰åŠ¹ã�«ã�—ã�¦ã�Šã��ã�“ã�¨ã‚’å¥¨ã‚�ã‚‹ã€‚Shell profile updaterã�¯ã€�ã�“ã�®ãƒ�ãƒ¼ã‚¸ãƒ§ãƒ³ã�®Pythonã�Œã‚·ã‚§ãƒ«ã�®æ¤œç´¢ãƒ‘ã‚¹ã�«ã�‚ã‚‹ã�“ã�¨ã‚’ä¿�è¨¼ã�™ã‚‹ã�Ÿã‚�ã�«ã€�ã‚·ã‚§ãƒ«ãƒ—ãƒ­ãƒ•ã‚¡ã‚¤ãƒ«ã‚’æ›´æ–°ã�™ã‚‹ã�‹ã�©ã�†ã�‹ã‚’ç®¡ç�†ã�™ã‚‹ã€‚ã�Šã��ã‚‰ã��ã�“ã‚Œã‚’å¤‰æ›´ã�™ã‚‹å¿…è¦�ã�¯ã�ªã�„ã€‚Fix system Pythonã�¯å¤‰æ›´ã�™ã�¹ã��ã�§ã�ªã�„ï¼ˆã�“ã�®ã‚ªãƒ—ã‚·ãƒ§ãƒ³ã�¯ã€�Appleã�«ã‚ˆã‚‹çµ„ã�¿è¾¼ã�¿ã�®ã‚·ã‚¹ãƒ†ãƒ ã‚¹ã‚¯ãƒªãƒ—ãƒˆã‚’å�«ã‚€ã�‚ã‚‰ã‚†ã‚‹Pythonã‚¹ã‚¯ãƒªãƒ—ãƒˆã‚’Python 3ã�§å®Ÿè¡Œã�™ã�¹ã�—ã�¨Mac OSã�«å‘½ã�šã‚‹ã‚‚ã�®ã� ã€‚ã�Šã��ã‚‰ã��ã�“ã‚Œã�¯ã�¨ã�¦ã‚‚é…·ã�„ã�“ã�¨ã�«ã�ªã‚‹ã€‚ã�¨ã�„ã�†ã�®ã‚‚ã€�ã�“ã‚Œã‚‰ã�®ã‚¹ã‚¯ãƒªãƒ—ãƒˆã�®ã�»ã�¨ã‚“ã�©ã�¯Python 2ç”¨ã�«æ›¸ã�‹ã‚Œã�¦ã�„ã‚‹ã�®ã�§ã€�Python 3ã� ã�¨æ­£å¸¸ã�«å‹•ä½œã�—ã�ªã��ã�ªã�£ã�¦ã�—ã�¾ã�†ã�‹ã‚‰ã� ï¼‰ã€‚Install ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦æ¬¡ã�¸é€²ã‚‚ã�†ã€‚ã‚·ã‚¹ãƒ†ãƒ å…¨ä½“ã�«å½±éŸ¿ã�™ã‚‹ãƒ•ãƒ¬ãƒ¼ãƒ ãƒ¯ãƒ¼ã‚¯ã�¨ãƒ�ã‚¤ãƒŠãƒªã‚’/usr/local/bin/ã�¸ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹ã�®ã�§ã€�ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�¯ã€�ç®¡ç�†è€…æ¨©é™�ã�®ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’å°‹ã�­ã�¦ã��ã‚‹ã€‚ç®¡ç�†è€…æ¨©é™�ã�ªã�—ã�«Macã�¸Pythonã‚’ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹æ–¹æ³•ã�¯ã�ªã�„ã€‚OK ãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦æ¬¡ã�¸é€²ã‚‚ã�†ã€‚é�¸æŠžã�—ã�Ÿæ©Ÿèƒ½ã‚’ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�—ã�¦ã�„ã‚‹ã�‚ã�„ã� ã€�ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�¯ã€�ã��ã�®é€²æ�—çŠ¶æ³�ã‚’ç¤ºã�™ãƒ¡ãƒ¼ã‚¿ã‚’è¡¨ç¤ºã�™ã‚‹ã€‚ã�™ã�¹ã�¦ã�Œã�†ã�¾ã��ã�„ã�‘ã�°ã€�ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã�¯ã€�å¤§ã��ã�ªç·‘ã�®ãƒ�ã‚§ãƒƒã‚¯ãƒžãƒ¼ã‚¯ã‚’è¡¨ç¤ºã�—ã�¦ã€�ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�Œæ­£å¸¸ã�«å®Œäº†ã�—ã�Ÿã�“ã�¨ã‚’æ•™ã�ˆã�¦ã��ã‚Œã‚‹ã€‚Close ãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ©ã‚’çµ‚äº†ã�—ã‚ˆã�†ã€‚ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹å ´æ‰€ã‚’å¤‰æ›´ã�—ã�¦ã�„ã�ªã�‘ã‚Œã�°ã€�æ–°ã�—ã��ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�•ã‚Œã�Ÿãƒ•ã‚¡ã‚¤ãƒ«ã�¯ã€�/Applicationsãƒ•ã‚©ãƒ«ãƒ€ã�«ã�‚ã‚‹Python 3.1ãƒ•ã‚©ãƒ«ãƒ€ã�®ä¸­ã�«ã�‚ã‚‹ã� ã‚�ã�†ã€‚ã�“ã�®ä¸­ã�§ä¸€ç•ªé‡�è¦�ã�ªã‚‚ã�®ã�¯ã‚°ãƒ©ãƒ•ã‚£ã‚«ãƒ«ã�ªPythonã‚·ã‚§ãƒ«ã�§ã�‚ã‚‹ IDLE ã� ã€‚IDLE ã‚’ãƒ€ãƒ–ãƒ«ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦Pythonã‚·ã‚§ãƒ«ã‚’èµ·å‹•ã�—ã‚ˆã�†ã€‚ã�“ã‚Œã�‹ã‚‰Pythonã�®ä¸–ç•Œã‚’æŽ¢ç´¢ã�—ã�¦ã�„ã��é�“ã�®ã‚Šã�®ã�†ã�¡ã€�ã�»ã�¨ã‚“ã�©ã�®æ™‚é–“ã�¯Pythonã‚·ã‚§ãƒ«ä¸Šã�§é�Žã�”ã�™ã�“ã�¨ã�«ã�ªã‚‹ã€‚ã�“ã�®æœ¬ã�®ã�„ã�Ÿã‚‹ã�¨ã�“ã‚�ã�«æŽ²è¼‰ã�•ã‚Œã�¦ã�„ã‚‹ã‚µãƒ³ãƒ—ãƒ«ã�¯ã€�ã�‚ã�ªã�Ÿã�Œè‡ªåˆ†ã�§Pythonã‚·ã‚§ãƒ«ã‚’ä½¿ã�£ã�¦ã�„ã�‘ã‚‹ã�“ã�¨ã‚’å‰�æ��ã�¨ã�—ã�¦ã�„ã‚‹ã€‚⁂Ubuntu Linuxã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹ç�¾ä»£çš„ã�ªLinuxãƒ‡ã‚£ã‚¹ãƒˆãƒªãƒ“ãƒ¥ãƒ¼ã‚·ãƒ§ãƒ³ã�¯ã€�ã�™ã��ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�§ã��ã‚‹ã‚³ãƒ³ãƒ‘ã‚¤ãƒ«æ¸ˆã�¿ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã�Œã�¤ã�¾ã�£ã�Ÿå·¨å¤§ã�ªãƒªãƒ�ã‚¸ãƒˆãƒªç¾¤ã�«æ”¯ã�ˆã‚‰ã‚Œã�¦ã�„ã‚‹ã€‚ã�“ã�®ä¸­èº«ã�®ç´°ç›®ã�¯ãƒ‡ã‚£ã‚¹ãƒˆãƒªãƒ“ãƒ¥ãƒ¼ã‚·ãƒ§ãƒ³ã�”ã�¨ã�«ç•°ã�ªã‚‹ã€‚Ubuntu Linuxã�§Python 3ã‚’ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹ã�«ã�¯ã€�ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ãƒ¡ãƒ‹ãƒ¥ãƒ¼ã�«ã�‚ã‚‹è¿½åŠ ã�¨å‰Šé™¤ã�¨ã�„ã�†ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã‚’ä½¿ç”¨ã�™ã‚‹ã�®ã�Œæœ€ã‚‚ç°¡å�˜ã� ã€‚è¿½åŠ ã�¨å‰Šé™¤ã�¨ã�„ã�†ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã‚’èµ·å‹•ã�™ã‚‹ã�¨ã€�ã�‚ã‚‰ã�‹ã�˜ã‚�é�¸ã�³å‡ºã�•ã‚Œã�Ÿã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã�®ãƒªã‚¹ãƒˆã�Œã‚«ãƒ†ã‚´ãƒªã�”ã�¨ã�«åˆ†é¡žã�•ã‚Œã�¦è¡¨ç¤ºã�•ã‚Œã‚‹ã€‚ã��ã�®ä¸€éƒ¨ã�¯ã�™ã�§ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�•ã‚Œã�¦ã�„ã‚‹ã�Œã€�å¤§éƒ¨åˆ†ã�¯ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�•ã‚Œã�¦ã�„ã�ªã�„ã€‚ãƒªãƒ�ã‚¸ãƒˆãƒªã�«ã�¯10000ä»¥ä¸Šã�®ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã�Œå­˜åœ¨ã�™ã‚‹ã�®ã�§ã€�ã��ã�®ä¸€éƒ¨ã� ã�‘ã‚’é�¸ã�³ã�¨ã‚Œã‚‹ã‚ˆã�†ã�«æ§˜ã€…ã�ªãƒ•ã‚£ãƒ«ã‚¿ã�Œç”¨æ„�ã�•ã‚Œã�¦ã�„ã‚‹ã€‚ãƒ‡ãƒ•ã‚©ãƒ«ãƒˆã�®ãƒ•ã‚£ãƒ«ã‚¿ã�¯ã€ŒCanonicalã�«ã‚ˆã�£ã�¦ä¿�å®ˆã�•ã‚Œã�¦ã�„ã‚‹ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã€�ã�«ã�ªã�£ã�¦ã�„ã‚‹ã€‚ã�“ã‚Œã�¯å…¨ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã�®ã�†ã�¡ã�®ã�»ã‚“ã�®ä¸€éƒ¨ã�§ã�‚ã‚Šã€�Ubuntu Linuxã‚’é–‹ç™ºãƒ»ä¿�å®ˆã�—ã�¦ã�„ã‚‹Canonicalç¤¾ã�«ã‚ˆã�£ã�¦å…¬å¼�ã�«ã‚µãƒ�ãƒ¼ãƒˆã�•ã‚Œã�¦ã�„ã‚‹ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã�‹ã‚‰æ§‹æˆ�ã�•ã‚Œã�¦ã�„ã‚‹ã€‚Python 3ã�¯Canonicalç¤¾ã�«ã‚ˆã�£ã�¦ä¿�å®ˆã�•ã‚Œã�¦ã�„ã�ªã�„ã�®ã�§ã€�ã�¾ã�šã�¯ãƒ•ã‚£ãƒ«ã‚¿ãƒ¡ãƒ‹ãƒ¥ãƒ¼ã�‹ã‚‰ã€Œã�™ã�¹ã�¦ã�®ã‚ªãƒ¼ãƒ—ãƒ³ã‚½ãƒ¼ã‚¹ã‚½ãƒ•ãƒˆã‚¦ã‚¨ã‚¢ã€�ã‚’é�¸æŠžã�—ã�¦é–‹ã�“ã�†ã€‚ã�™ã�¹ã�¦ã�®ã‚ªãƒ¼ãƒ—ãƒ³ã‚½ãƒ¼ã‚¹ã‚½ãƒ•ãƒˆã‚¦ã‚¨ã‚¢ã�Œå…¥ã‚‹ã‚ˆã�†ã�«ãƒ•ã‚£ãƒ«ã‚¿ã‚’å¤‰æ›´ã�—ã�Ÿã‚‰ã€�ãƒ•ã‚£ãƒ«ã‚¿ãƒ¡ãƒ‹ãƒ¥ãƒ¼ã�®ã�™ã��éš£ã�«ã�‚ã‚‹æ¤œç´¢ãƒœãƒƒã‚¯ã‚¹ã�«Python 3ã�¨å…¥åŠ›ã�—ã‚ˆã�†ã€‚ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã�®ãƒªã‚¹ãƒˆã�Œçµžã‚Šè¾¼ã�¾ã‚Œã�¦ã€�Python 3ã�«ãƒžãƒƒãƒ�ã�™ã‚‹ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã� ã�‘ã�«ã�ªã�£ã�Ÿã�¯ã�šã� ã€‚ã�“ã�“ã�§2ã�¤ã�®ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ã�«ãƒ�ã‚§ãƒƒã‚¯ã‚’ä»˜ã�‘ã‚ˆã�†ã€‚1ã�¤ç›®ã�¯Python (v3.0)ã�§ã€�ã�“ã�®ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ã�¯Pythonã�®ã‚¤ãƒ³ã‚¿ãƒ—ãƒªã‚¿ã‚’å�«ã‚“ã�§ã�„ã‚‹ã€‚2ã�¤ç›®ã�®ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ã�¯ã�™ã��ä¸Šã�«ã�‚ã‚‹IDLE (using Python-3.0)ã� ã€‚ã�“ã‚Œã�¯ã€�ã�“ã�®æœ¬ã‚’é€šã�—ã�¦ä½¿ã�†ã�“ã�¨ã�«ã�ªã‚‹ã‚°ãƒ©ãƒ•ã‚£ã‚«ãƒ«ã�ªPythonã‚·ã‚§ãƒ«ã� ã€‚2ã�¤ã�®ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ã�«ãƒ�ã‚§ãƒƒã‚¯ã‚’ä»˜ã�‘ã�Ÿã‚‰ã€�å¤‰æ›´ã�®é�©ç”¨ãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦æ¬¡ã�¸é€²ã‚‚ã�†ã€‚ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ãƒžãƒ�ãƒ¼ã‚¸ãƒ£ã�¯ã€�IDLE (using Python-3.0)ã�¨Python (v3.0)ã‚’æœ¬å½“ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹ã�‹ã�©ã�†ã�‹ã‚’ç¢ºèª�ã�—ã�¦ã��ã‚‹ã€‚é�©ç”¨ ãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�—ã�¦æ¬¡ã�¸é€²ã‚‚ã�†ã€‚ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ãƒžãƒ�ãƒ¼ã‚¸ãƒ£ã�ŒCanonicalã�®ã‚¤ãƒ³ã‚¿ãƒ¼ãƒ�ãƒƒãƒˆãƒªãƒ�ã‚¸ãƒˆãƒªã�‹ã‚‰å¿…è¦�ã�ªãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ã‚’ãƒ€ã‚¦ãƒ³ãƒ­ãƒ¼ãƒ‰ã�—ã�¦ã�„ã‚‹ã�‚ã�„ã� ã€�ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�®é€²æ�—åº¦ã‚’ç¤ºã�™ãƒ�ãƒ¼ã�Œè¡¨ç¤ºã�•ã‚Œã‚‹ã€‚ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ã‚’ãƒ€ã‚¦ãƒ³ãƒ­ãƒ¼ãƒ‰ã�—çµ‚ã‚�ã‚‹ã�¨ã€�ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ãƒžãƒ�ãƒ¼ã‚¸ãƒ£ã�¯è‡ªå‹•çš„ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã‚’é–‹å§‹ã�™ã‚‹ã€‚ã�™ã�¹ã�¦ã�Œç„¡äº‹å®Œäº†ã�™ã‚‹ã�¨ã€�ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ãƒžãƒ�ãƒ¼ã‚¸ãƒ£ã�¯ã€�2ã�¤ã�®ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ã�Œæ­£å¸¸ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�•ã‚Œã�Ÿã�“ã�¨ã‚’çŸ¥ã‚‰ã�›ã�¦ã��ã‚‹ã€‚ã�“ã�“ã�§ IDLE ã‚’ãƒ€ãƒ–ãƒ«ã‚¯ãƒªãƒƒã‚¯ã�™ã‚Œã�°Pythonã‚·ã‚§ãƒ«ã‚’èµ·å‹•ã�§ã��ã‚‹ã�—ã€�é–‰ã�˜ã‚‹ãƒœã‚¿ãƒ³ã‚’ã‚¯ãƒªãƒƒã‚¯ã�™ã‚Œã�°ãƒ‘ãƒƒã‚±ãƒ¼ã‚¸ãƒžãƒ�ãƒ¼ã‚¸ãƒ£ã�Œçµ‚äº†ã�™ã‚‹ã€‚ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ãƒ¡ãƒ‹ãƒ¥ãƒ¼ã�®ãƒ—ãƒ­ã‚°ãƒ©ãƒŸãƒ³ã‚°ã‚µãƒ–ãƒ¡ãƒ‹ãƒ¥ãƒ¼ã�‹ã‚‰ IDLE ã‚’é�¸æŠžã�™ã‚‹ã�“ã�¨ã�§ã€�Pythonã‚·ã‚§ãƒ«ã‚’ã�„ã�¤ã�§ã‚‚èµ·å‹•ã�§ã��ã‚‹ã€‚ã�“ã‚Œã�‹ã‚‰Pythonã�®ä¸–ç•Œã‚’æŽ¢ç´¢ã�—ã�¦ã�„ã��é�“ã�®ã‚Šã�®ã�†ã�¡ã€�ã�»ã�¨ã‚“ã�©ã�®æ™‚é–“ã�¯Pythonã‚·ã‚§ãƒ«ä¸Šã�§é�Žã�”ã�™ã�“ã�¨ã�«ã�ªã‚‹ã€‚ã�“ã�®æœ¬ã�®ã�„ã�Ÿã‚‹ã�¨ã�“ã‚�ã�«æŽ²è¼‰ã�•ã‚Œã�¦ã�„ã‚‹ã‚µãƒ³ãƒ—ãƒ«ã�¯ã€�ã�‚ã�ªã�Ÿã�Œè‡ªåˆ†ã�§Pythonã‚·ã‚§ãƒ«ã‚’ä½¿ã�£ã�¦ã�„ã�‘ã‚‹ã�“ã�¨ã‚’å‰�æ��ã�¨ã�—ã�¦ã�„ã‚‹ã€‚⁂ã��ã�®ä»–ã�®ãƒ—ãƒ©ãƒƒãƒˆãƒ•ã‚©ãƒ¼ãƒ ã�«ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã�™ã‚‹⁂Pythonã‚·ã‚§ãƒ«ã‚’ä½¿ã�†Pythonã‚·ã‚§ãƒ«ã�¯ã€�Pythonã�®æ§‹æ–‡ã‚’æŽ¢æ±‚ã�—ã�Ÿã‚Šã€�ã‚³ãƒžãƒ³ãƒ‰ã�«ã�¤ã�„ã�¦ã�®å¯¾è©±çš„ã�ªãƒ˜ãƒ«ãƒ—ã‚’å¾—ã�Ÿã‚Šã€�çŸ­ã�„ãƒ—ãƒ­ã‚°ãƒ©ãƒ ã‚’ãƒ‡ãƒ�ãƒƒã‚°ã�—ã�Ÿã‚Šã�§ã��ã‚‹å ´æ‰€ã� ã€‚ã‚°ãƒ©ãƒ•ã‚£ã‚«ãƒ«ã�ªPythonã‚·ã‚§ãƒ«ï¼ˆ IDLE ï¼‰ã�«ã�¯å„ªã‚Œã�Ÿãƒ†ã‚­ã‚¹ãƒˆã‚¨ãƒ‡ã‚£ã‚¿ã‚‚å…¥ã�£ã�¦ã�„ã‚‹ã€‚ã�“ã�®ã‚¨ãƒ‡ã‚£ã‚¿ã�¯Pythonã‚·ã‚§ãƒ«ã�«çµ±å�ˆã�•ã‚Œã�¦ã�Šã‚Šã€�Pythonã�®æ§‹æ–‡ã�«è‰²ä»˜ã�‘ã�™ã‚‹æ©Ÿèƒ½ã‚‚ã‚µãƒ�ãƒ¼ãƒˆã�—ã�¦ã�„ã‚‹ã€‚ã�Šæ°—ã�«å…¥ã‚Šã�®ãƒ†ã‚­ã‚¹ãƒˆã‚¨ãƒ‡ã‚£ã‚¿ã�Œã�¾ã� ç„¡ã�„ã�®ã�§ã�‚ã‚Œã�°ã€�ã�¾ã�šã�¯ IDLE ã‚’è©¦ã�—ã�¦ã�¿ã‚ˆã�†ã€‚>>>>>>ã�¯Pythonã‚·ã‚§ãƒ«ã�®ãƒ—ãƒ­ãƒ³ãƒ—ãƒˆã‚’è¡¨ã�—ã�¦ã�„ã‚‹ã€‚ã�“ã�®éƒ¨åˆ†ã‚’å…¥åŠ›ã�—ã�¦ã�¯ã�„ã�‘ã�ªã�„ã€‚ã�“ã‚Œã�¯å�˜ã�«ã€�ã�“ã�®ä¾‹ã�¯Pythonã‚·ã‚§ãƒ«ã�§ã�Ÿã�©ã‚‹å¿…è¦�ã�Œã�‚ã‚‹ã€�ã�¨ã�„ã�†ã�“ã�¨ã‚’çŸ¥ã‚‰ã�›ã�¦ã�„ã‚‹ã� ã�‘ã� ã€‚1 + 1ã�Œå…¥åŠ›ã�™ã‚‹éƒ¨åˆ†ã� ã€‚æ­£ã�—ã�„Pythonã�®å¼�ã‚„ã‚³ãƒžãƒ³ãƒ‰ã�§ã�‚ã‚Œã�°ã�©ã‚“ã�ªã‚‚ã�®ã�§ã‚‚Pythonã‚·ã‚§ãƒ«ã�«å…¥åŠ›ã�§ã��ã‚‹ã€‚æ��ã‚Œã‚‹ã�“ã�¨ã�ªã�‹ã‚Œã€‚Pythonã‚·ã‚§ãƒ«ã�¯å™›ã�¿ã�¤ã�„ã�Ÿã‚Šã�—ã�ªã�„ã‚ˆï¼� æ‚ªã�„ã�“ã�¨ã�Œèµ·ã��ã‚‹ã�¨ã�—ã�¦ã‚‚ã€�ã�›ã�„ã�œã�„ã‚¨ãƒ©ãƒ¼ãƒ¡ãƒƒã‚»ãƒ¼ã‚¸ã�Œè¡¨ç¤ºã�•ã‚Œã‚‹ã��ã‚‰ã�„ã� ã€‚ã‚³ãƒžãƒ³ãƒ‰ã�¯ï¼ˆENTERã‚­ãƒ¼ã‚’æŠ¼ã�™ã�¨ï¼‰å�³åº§ã�«å®Ÿè¡Œã�•ã‚Œã€�å¼�ã�¯å�³åº§ã�«è©•ä¾¡ã�•ã‚Œã€�Pythonã‚·ã‚§ãƒ«ã�Œã��ã�®çµ�æžœã‚’è¡¨ç¤ºã�™ã‚‹ã€‚2ã�Œã�“ã�®å¼�ã‚’è©•ä¾¡ã�—ã�Ÿçµ�æžœã� ã€‚å�¶ç„¶ã�«ã‚‚1 + 1ã�¯æ­£ã�—ã�„Pythonã�®å¼�ã� ã€‚çµ�æžœã�¯ã‚‚ã�¡ã‚�ã‚“2ã� ã€‚>>>print('Hello world!')Hello world!ã�¨ã�¦ã‚‚å�˜ç´”ã�§ã�—ã‚‡ï¼Ÿ ã� ã�‘ã‚Œã�©ã€�Pythonã‚·ã‚§ãƒ«ã�®ä¸­ã�§ã�§ã��ã‚‹ã�“ã�¨ã�¯ã‚‚ã�£ã�¨ã�Ÿã��ã�•ã‚“ã�‚ã‚‹ã€‚ã‚‚ã�—è¡Œã��è©°ã�¾ã�£ã�Ÿã�¨ã��ã�¯—ä¾‹ã�ˆã�°ã‚³ãƒžãƒ³ãƒ‰ã�Œæ€�ã�„å‡ºã�›ã�ªã�„ã�¨ã��ã‚„ã€�é–¢æ•°ã�®é�©åˆ‡ã�ªå¼•æ•°ã‚’æ€�ã�„å‡ºã�›ã�ªã�„ã�¨ã��ã�¯—Pythonã‚·ã‚§ãƒ«ã�§å¯¾è©±çš„ã�ªãƒ˜ãƒ«ãƒ—ã�Œå¾—ã‚‰ã‚Œã‚‹ã€‚ã��ã‚Œã�«ã�¯helpENTER>>>helpType help() for interactive help, or help(object) for help about object.ãƒ˜ãƒ«ãƒ—ã�«ã�¯2ã�¤ã�®ãƒ¢ãƒ¼ãƒ‰ã�Œå­˜åœ¨ã�™ã‚‹ã€‚ã��ã�®1ã�¤ã�¯ã€�å�˜ä¸€ã�®ã‚ªãƒ–ã‚¸ã‚§ã‚¯ãƒˆã�«ã�¤ã�„ã�¦ã�®ãƒ˜ãƒ«ãƒ—ã‚’å¾—ã‚‹ã‚‚ã�®ã�§ã€�ã�“ã‚Œã�¯å�˜ã�«ã��ã�®ãƒ‰ã‚­ãƒ¥ãƒ¡ãƒ³ãƒˆã‚’è¡¨ç¤ºã�—ã�¦Pythonã‚·ã‚§ãƒ«ã�®ãƒ—ãƒ­ãƒ³ãƒ—ãƒˆã�¸æˆ»ã‚‹ã€‚ã€Œãƒ˜ãƒ«ãƒ—ãƒ¢ãƒ¼ãƒ‰ã€�ã�«å…¥ã‚‹ã�“ã�¨ã‚‚ã�§ã��ã€�ã��ã�“ã�§ã�¯Pythonã�®å¼�ã‚’è©•ä¾¡ã�™ã‚‹ä»£ã‚�ã‚Šã�«ã‚­ãƒ¼ãƒ¯ãƒ¼ãƒ‰ã‚„ã‚³ãƒžãƒ³ãƒ‰å��ã‚’å…¥åŠ›ã�™ã‚‹ã�“ã�¨ã�§ã€�ã��ã�®ã‚³ãƒžãƒ³ãƒ‰ã�«ã�¤ã�„ã�¦çŸ¥ã�£ã�¦ã�„ã‚‹ã�“ã�¨ã‚’ãƒ˜ãƒ«ãƒ—ã�Œè¡¨ç¤ºã�—ã�¦ã��ã‚Œã‚‹ã€‚å¯¾è©±ãƒ˜ãƒ«ãƒ—ãƒ¢ãƒ¼ãƒ‰ã�«å…¥ã‚‹ã�Ÿã‚�ã�«ã€�helpENTER>>>help()Welcome to Python 3.0!  This is the online help utility.  If this is your first time using Python, you should definitely check out the tutorial on the Internet at http://docs.python.org/tutorial/.  Enter the name of any module, keyword, or topic to get help on writing Python programs and using Python modules.  To quit this help utility and return to the interpreter, just type 'quit'.  To get a list of available modules, keywords, or topics, type 'modules', 'keywords', or 'topics'.  Each module also comes with a one-line summary of what it does; to list the modules whose summaries contain a given word such as 'spam', type 'modules spam'.help>>>>help>ã�«å¤‰åŒ–ã�—ã�Ÿã�“ã�¨ã�«æ³¨æ„�ã�—ã‚ˆã�†ã€‚ã�“ã‚Œã�¯ã€�ã�„ã�¾å¯¾è©±ãƒ˜ãƒ«ãƒ—ãƒ¢ãƒ¼ãƒ‰ã�«å…¥ã�£ã�¦ã�„ã‚‹ã�“ã�¨ã‚’çŸ¥ã‚‰ã�›ã�¦ã�„ã‚‹ã€‚ã�“ã�“ã�§ã�¯ã€�ã‚­ãƒ¼ãƒ¯ãƒ¼ãƒ‰ãƒ»ã‚³ãƒžãƒ³ãƒ‰ãƒ»ãƒ¢ã‚¸ãƒ¥ãƒ¼ãƒ«å��ãƒ»é–¢æ•°å�� — ã�¤ã�¾ã‚ŠPythonã�Œç�†è§£ã�™ã‚‹ã�“ã�¨ã�ªã‚‰ã�»ã�¨ã‚“ã�©ä½•ã�§ã‚‚å…¥åŠ›ã�§ã��ã€�ã��ã‚Œã�«ã�¤ã�„ã�¦ã�®èª¬æ˜Žã‚’èª­ã‚€ã�“ã�¨ã�Œã�§ã��ã‚‹ã€‚>>>printENTERã‚’æŠ¼ã��ã�†ã€‚å¯¾è©±ãƒ˜ãƒ«ãƒ—ãƒ¢ãƒ¼ãƒ‰ã�¯manãƒšãƒ¼ã‚¸ã�®ã‚ˆã�†ã�ªã‚‚ã�® — é–¢æ•°å��ãƒ»ç°¡æ½”ã�ªæ¦‚è¦�ãƒ»é–¢æ•°ã�®å¼•æ•°ã�¨ã��ã�®ãƒ‡ãƒ•ã‚©ãƒ«ãƒˆå€¤ã�ªã�©ã‚’è¡¨ç¤ºã�™ã‚‹ã€‚ã�“ã�®ãƒ‰ã‚­ãƒ¥ãƒ¡ãƒ³ãƒˆã�«æ›¸ã�‹ã‚Œã�¦ã�„ã‚‹ã�“ã�¨ã�Œç�†è§£ã�§ã��ã�ªã��ã�¦ã‚‚ã€�æ…Œã�¦ã�ªã�„ã‚ˆã�†ã�«ã€‚ã�“ã‚Œã‚‰ã�«ã�¤ã�„ã�¦ã�¯å¾Œã�®ã�„ã��ã�¤ã�‹ã�®ç« ã�§èª¬æ˜Žã�™ã‚‹ã�‹ã‚‰ã€‚ã‚‚ã�¡ã‚�ã‚“ã€�å¯¾è©±ãƒ˜ãƒ«ãƒ—ãƒ¢ãƒ¼ãƒ‰ã�Œã�‚ã‚‰ã‚†ã‚‹ã�“ã�¨ã‚’çŸ¥ã�£ã�¦ã�„ã‚‹ã‚�ã�‘ã�¯ã�ªã�„ã€‚Pythonã�®ã‚³ãƒžãƒ³ãƒ‰ãƒ»ãƒ¢ã‚¸ãƒ¥ãƒ¼ãƒ«ãƒ»é–¢æ•°ãƒ»ã��ã�®ä»–ã�®çµ„ã�¿è¾¼ã�¿ã‚­ãƒ¼ãƒ¯ãƒ¼ãƒ‰ã�¨é–¢ä¿‚ã�®ã�ªã�„ã�“ã�¨ã‚’è�žã�‹ã‚Œã�Ÿã‚‰ã€�å¯¾è©±ãƒ˜ãƒ«ãƒ—ãƒ¢ãƒ¼ãƒ‰ã�¯(ä»®æƒ³ä¸Šã�®)è‚©ã‚’ã�™ã��ã‚�ã�¦ã�—ã�¾ã�†ã� ã‚�ã�†ã€‚å¯¾è©±ãƒ˜ãƒ«ãƒ—ãƒ¢ãƒ¼ãƒ‰ã‚’çµ‚äº†ã�™ã‚‹ã�Ÿã‚�ã�«ã€�quitENTERã‚’æŠ¼ã��ã�†ã€‚>>>ã�«æˆ»ã‚‹ã€‚⁂Pythonã�®ã‚¨ãƒ‡ã‚£ã‚¿ã�¨IDEPythonã�®ãƒ—ãƒ­ã‚°ãƒ©ãƒ ã‚’æ›¸ã��ã�Ÿã‚�ã�®ã‚¨ãƒ‡ã‚£ã‚¿ã�¯ IDLE ã� ã�‘ã�¨ã�„ã�†ã‚�ã�‘ã�§ã�¯ã�ªã�„ã€‚ IDLE ã�¯è¨€èªžè‡ªä½“ã‚’å­¦ã�¶ã�¨ã��ã�«ã�¯ä¾¿åˆ©ã� ã�Œã€�å¤šã��ã�®é–‹ç™ºè€…ã�¯ä»–ã�®ãƒ†ã‚­ã‚¹ãƒˆã‚¨ãƒ‡ã‚£ã‚¿ã‚„çµ±å�ˆé–‹ç™ºç’°å¢ƒï¼ˆ IDE ï¼‰ã‚’å¥½ã‚“ã�§ä½¿ã�£ã�¦ã�„ã‚‹ã€‚ã��ã‚Œã‚‰ã‚’ã�“ã�“ã�§å�–ã‚Šä¸Šã�’ã‚‹ã�¤ã‚‚ã‚Šã�¯ã�ªã�„ã�Œã€�Pythonã‚³ãƒŸãƒ¥ãƒ‹ãƒ†ã‚£ã�¯ã€�åºƒç¯„å›²ã�®ãƒ—ãƒ©ãƒƒãƒˆãƒ•ã‚©ãƒ¼ãƒ ã�¨ã‚½ãƒ•ãƒˆã‚¦ã‚¨ã‚¢ãƒ©ã‚¤ã‚»ãƒ³ã‚¹ã‚’ç¶²ç¾…ã�—ã�Ÿ Pythonå¯¾å¿œã‚¨ãƒ‡ã‚£ã‚¿ã�®ãƒªã‚¹ãƒˆ ã‚’ç®¡ç�†ã�—ã�¦ã�„ã‚‹ã€‚Python 3ã�«å¯¾å¿œã�™ã‚‹ã‚‚ã�®ã�¯å°‘ã�ªã�„ã‚‚ã�®ã�®ã€� Pythonã�«å¯¾å¿œã�—ã�Ÿ IDE ã�®ãƒªã‚¹ãƒˆ ã‚’è¦‹ã�Ÿã�„äººã‚‚ã�„ã‚‹ã� ã‚�ã�†ã€‚å¯¾å¿œã�—ã�¦ã�„ã‚‹ã‚‚ã�®ã�®1ã�¤ã�« PyDev ã�Œã�‚ã‚Šã€�ã�“ã‚Œã�¯ Eclipse ã‚’æœ¬æ ¼çš„ã�ªPythonç”¨ IDE ã�«å¤‰ã�ˆã‚‹Eclipseã�®ãƒ—ãƒ©ã‚°ã‚¤ãƒ³ã� ã€‚Eclipseã�¨PyDevã�¯ã€�ã�©ã�¡ã‚‰ã‚‚ã‚¯ãƒ­ã‚¹ãƒ—ãƒ©ãƒƒãƒˆãƒ•ã‚©ãƒ¼ãƒ ã�§ã‚ªãƒ¼ãƒ—ãƒ³ã‚½ãƒ¼ã‚¹ã�ªã‚½ãƒ•ãƒˆã‚¦ã‚§ã‚¢ã� ã€‚å•†ç”¨ã�®ã‚½ãƒ•ãƒˆã‚¦ã‚¨ã‚¢ã�¨ã�—ã�¦ã�¯ActiveStateã�® Komodo IDE ã�Œå­˜åœ¨ã�™ã‚‹ã€‚ãƒ¦ãƒ¼ã‚¶ã�”ã�¨ã�«ãƒ©ã‚¤ã‚»ãƒ³ã‚¹ã�Œå¿…è¦�ã� ã�Œã€�å­¦å‰²ã‚’é�©ç”¨ã�§ã��ã‚‹ã�—ã€�æ™‚é–“åˆ¶é™�ä»˜ã��ã�®ä½“é¨“ç‰ˆã‚‚ç„¡å„Ÿã�§åˆ©ç”¨ã�§ã��ã‚‹ã€‚☜ ☞
38	プログラミング工場 / Python Python	File 'hoge.py', line 3SyntaxError: Non-ASCII character 'ã' in file hoge.py on line 3, but no encoding declared; see http://www.python.org/peps/pep-0263.html for detailsソースコードにエンコーディングが設定されていないことによるエラーですので，ソースコード2行目あたりにエンコーディングを指定してください．具 体的にはこんな感じで#!/usr/bin/env python# -*- coding: utf-8 -*-text = u'りんご'print text個人的にはutf-8が好きなので，utf-8を使っています．今後もutf-8を基準にして紹介しますので，他の文字コードを用いている方はutf-8を脳内で自身の用いている文字コードに置き換えて読んでください．基本的に，encodeの引数に変換したい文字コードを指定するだけ．class WebSearchParser:result = {}def parse(text):results = TOKENS.findall(text)return resultsresults = []results.append(text[i:i+n])print efor x, y, z in sorted(l):print x, y, zここで，3つめの値で降順（大きい順）にソートしてやりたい場合はkey値とreverse値を指定してやります．for x, y, z in sorted(l, key=lambda x:x[2], reverse=True):print x, y, zprint e['hoge'], e['foo'], e['bar']実行結果for k, v in sorted(d.items()):print k, vprint k, v
39	綺麗なコードが良い: Python	import osimport glob[key for key, value in sorted({file:os.path.getmtime(file) for file in glob.glob('*.txt')}.items(), key=lambda x:x[1], reverse=True)]これで更新時刻が新しい順に並んだファイル名のリストを得ることができる。fout.write(book.Name+'\n')    for file in files:    print (root)    for file in files:そこで、 tablesort というJavaScriptのライブラリを使って、さくっと作ってみた。世の中便利になったものだ。★WOZ★>>> adict = {'taro':20, 'jiro':15}...         print name, age例えば、Pythonを使うと、エクセルブックとオラクルデータベースをくっつけて、実はこの文字列は'鉄人28号'をURLエンコードしてある。>>> a = '%e9%89%84%e4%ba%ba28%e5%8f%b7'>>> print a>>> b = urllib.unquote_plus(a)>>> print bその他のカテゴリー
40	python練習帳 - PHP6.jp	しばらくGoogleAppEngineから離れていた間に、随分バージョンあっぷが進んでいるようです。Pythonも2.7.3までバージョンアップしているし、価格面での変更もかなり入っているようです。一度時間をとって、本格的に取り組む価値があるのかどうか考えてみたいと思います。途中までですが、翻訳したものを掲載します。Backendを使いこなせれば化けそうな気がします。TaskQueueの変更も気になりますが、まずはBackendを実際につかってみようと思いました。Version 1.5.0 – May 10, 2011Support for Backends which allow developers to create infrastructure components that complement the existing dynamic apps that App Engine already provides. Instances of a backend can maintain state, be addressed individually, and are not subject to per-request time limits. They can also be configured to consume more memory and CPU than ordinary dynamic instances.⇒Backendを導入しました。Backendは既存のダイナミックな（リクエストに応じて生成される）アプリケーションを補完するサービスです。Backendは実行時間の制約を受けることなく動作し続けます。Backend上のインスタンスは、通常のインスタンスと比べ、多くのメモリとCPUを使用できます。常駐型のアプリケーションを作成できるようです。実現できるアプリケーションの幅が広がりそうですが、いまいち使い方がわかりません。これから調査します！Task Queues support pull mode, allowing for more control over task queue work rates. To use pull queues, include the ‘mode’ argument in your queue.yaml.TaskQueueがプルモード（引っ張るモード）をサポートしました。プルモードを使うと実行頻度をより柔軟に制御できます。プルモードを使うためには、queue.yamlにmode要素を追加してください。Pull queues are supported by a REST API, allowing access from outside App Engine. To use the REST API, you must also include a valid ACL section specifying which users can lease tasks from the pull queue.プルキューは、REST APIをサポートしているため、AppEngineの外部から利用できます。REST APIを使うためには、どのユーザがキューを利用してよいのかACLセクションに記述しなければなりません。Task Queue payload limits have been increased. Queues support 100KB per task. Within App Engine, the new limit is 32 MB per batch of tasks. With the REST API the limit is 1 MB per batch.TaskQueueのPayloadの上限が100KBに増加しました。taskのbatch当たりでの上限は32MB。REST APIでの上限は1MBです。⇒TaskQueueの利用制限が緩和されているようです。HTTP request and response sizes have been increased to 32 MB.HTTPリクエストとHTTPレスポンスの容量制限が32MBに緩和されました。⇒これはかなり重要な更新です。2009年2月2日に1.1.9がリリースされた際に1MBから10MBに緩和されて以来の変更です。We have removed the rate quotas for requests, datastore operations, memcache operations, and image API operations. Resource quotas still apply.HTTPリクエスト、データストアの操作、Memcachedの操作、画像APIに対するQuota制限を撤廃しました。リソースQuotaは依然として適用されます。When creating new applications, developers will now see the High Replication Datastore as the default configuration option. Developers that still wish to use the Master/Slave configuration must explicitly choose this option at application creation time.High Replication Datastoreを選択できるようになりました。利用する場合はアプリケーション作成時に明示的に選択する必要があります。→従来のMaster/SlaveタイプのDatastoreと比べると安全性が高いですが、利用料金も高いです。The Task Queue maximum configurable processing rate has been increased to 500/s.TaskQueueの最大処理速度が、1秒間に500回まで設定できるようになりました。We have added two restrictions to the Mail API to improve the reliability of the service for all application.MailAPIの利用制限を厳格にしました。Emails must be sent from email accounts managed by Google (either Gmail or a domain signed up for Google Apps).送信主のメールアドレスは、Google（ドメインはGmailであっても、ユーザの独自ドメインであっても構わない）が管理しているアドレスを使わなければならない。Reduced the number of free recipients per day from 2000 to 100 for new applications.無料で使える送信対象の数は、2000から100に減ります。All application Owners, as listed in the Admin Console, can download the app’s code, unless code download is disabled for the application.Added db.py support for making calls to the datastore asynchronously. Available functions are get_async(), put_async(), delete_async(), allocate_ids_async(). Call get_result on the return value of asynchronous datastore functions to block on the call.Metadata queries can now get all namespaces, kinds, and properties in a given range.The Testbed API now supports the Channel API.Users can provide Django settings to be loaded in webapp’s django_setup.Modified Dashboard latency graphs to indicate they only include dynamic requests.Fixed an issue where metadata queries did not support unicode characters.Fixed an issue where HTTP headers could contain new line characters.A warning message is shown when the Python version used to run the SDK is different than the Python version used in production.Fixed an issue with Federated Users causing the Admin Console dataviewer to fail.長らく本ブログの更新を出来ていませんでしたが、そろそろ更新を再開できそうです。3月後半から非常に忙しい状態が続いており、6月中頃まで更新はほぼ停止状態になると思います。6月中頃からは、1日1回ペースでの更新に回復する予定ですので、気長にお待ちいただければと思います。GoogleAppEngineは1つのアカウントで10個のアプリケーションを実行できます。複数のアカウントを取得することで、10を超えるアプリケーションを動作させることも可能ですが、不要になったアプリケーションがあれば、削除して再利用しましょう。2. Disable Application NowボタンをクリックGAE上のアプリケーションを削除する方法をまとめようとしたのですが、どうしてもエラーになってしまいました。サービスが不安定になっているだけの可能性もあるので、時間をおいて、再度やってみます。2. Disable Application NowボタンをクリックWordPressに FollowMe を導入しました。Twitterを御利用の方は是非Followしてみてください。GoogleAppEngine SDKのバージョン1.4.3が3月30日にリリースされました。マイナーバージョンアップですが、バグフィックスだけでなく、新機能も実装されています。GAEで開発をされている方は特別な事情のない限りアップデートをお勧めします。File APIをサポートしました。FileAPIを使うとblobstore内のファイルを読み書きできます。Added Files API that allows writing to and reading from files in blobstore.Cronの実行開始時刻と実行終了時刻を指定できるようになりました。You can now specify cron execution for a time interval between a start and end time.« More »123456789101112131415161718192021222324252627282930           [-p|--paginate|--no-pager] [--no-replace-objects]           [-c name=value] [--help]The most commonly used git commands are:   add        Add file contents to the index   bisect     Find by binary search the change that introduced a bug   branch     List, create, or delete branches   checkout   Checkout a branch or paths to the working tree   clone      Clone a repository into a new directory   commit     Record changes to the repository   diff       Show changes between commits, commit and working tree, etc   fetch      Download objects and refs from another repository   grep       Print lines matching a pattern   init       Create an empty git repository or reinitialize an existing one   log        Show commit logs   merge      Join two or more development histories together   mv         Move or rename a file, a directory, or a symlink   pull       Fetch from and merge with another repository or a local branch   push       Update remote refs along with associated objects   rebase     Forward-port local commits to the updated upstream head   reset      Reset current HEAD to the specified state   rm         Remove files from the working tree and from the index   show       Show various types of objects   status     Show the working tree status   tag        Create, list, delete or verify a tag object signed with GPGSee 'git help <command>' for more information on a specific command.git init リポジトリを作成するgit status 変更ファイルを表示するgit diff 変更点を表示するgit add コミットファイルを指定するgit commit コミットgit log ログを閲覧git reset 直前のコミットを取り消すgit revert コミット後の変更点を破棄するgit branch ブランチ作成git checkout ブランチ切り替えgit merge ブランチをマージgit tag タグを付けるgit rebase ブランチの派生元を変更GAE/Pythonで、一体いつになったらPython3系が使えるようになるのか。興味深いページがあったのでざっくり翻訳してみました。It should be implemented as a separate runtime.独立した実行環境で実装されるべきだよね。Comment 4 by art.cowles, Jan 9, 2009Being new to Appengine, I don’t want to learn the 2.xx line of Python with the newavailable. If I am going to learn a new language (which I am happy about) I want tolearn the latest version.Comment 5 by mark.hac…@gmail.com, Feb 3, 2009I would like to be able to use FloatProperty in in the datastore. This does notappear to be supported by Python 2.5.I’m not sure if it is supported by 2.6. I’m in the process of moving to 3.0, so Iwould like to see FloatProperty work with that.DataStoreでFloatPropertyを使いたいんだけど、Python2.5じゃ使えないみたいなんだよね。2.6で使えるかどうかも分からないけど。今は、3.0に向かってるところさ。Comment 6 by cherryp…@gmail.com, Feb 5, 2009Like Comment #4 I’m new to both python and app engine.  I’d rather learn the newestvariation of python while I’m learning app engine.4の人と同じで、Pythonもapp engineも勉強しはじめたところ。最新版を勉強したいよね。Comment 8 by kaboodle.world, Feb 9, 2009same here!! being new to both Appengine and Python, i did not want to learn 2.xxversion… I do not want to invest time in something that is not going to be in usein future.同じく勉強始めたとこなんだけど、将来使われることのないバージョン(2.xx)に時間をつぎ込みたくないよ。Comment 9 by joneep…@gmail.com, Feb 10, 2009python3 is more pure than 2, i want see gae support it.python3はpython2より純粋な言語さ。早くgaeがサポートしないかな。Comment 10 by MichaelEONeal, Feb 23, 2009Would love to know if and when. Another newbie to both wanting to know where toinvest time.Comment 11 by jmjdel…@comcast.net, Mar 13, 2009I can’t justify investing in a dead-end version of Python. I will not investigateGAE further until it supports Python 3.0. GAE is the best approach for my project,but implementing ‘backwards’ is not an option.死にゆくバージョンのPythonに時間を使うことを正当化するのは無理だね。GAEがPython3.0をサポートするまで調査するのは保留する。GAEは最高の選択肢だとおもうけど、古いものを実装するなら、選択肢から外れるよ。Comment 12 by mitskin, Apr 22, 2009Python 3, with the enhancements in the libraries and most important of all for the web, the fix to the Unicodemess, would be a better fit for the app engine.Python3はライブラリの拡充も素晴らしいけど、Unicodeの大混乱を収束させたってのが大きいよ。GAEはWeb向けなのでなおさらね。yep python 3 is a must!python3は必須条件だ！Comment 14 by dyln…@gmail.com, Jun 2, 2009I noticed several mentions of Python 3 being somehow better, less-dead end, or betterto learn for a novice then Python 2.x. There are obviously differences between thelanguages but Python 2.x is going to be the dominant implementation of Python used inmost projects for at least another year and a half.Python3が2.xよりいいって話はいくつか聞いたけど、あと1年半ぐらいはPython2.xが主流だとおもうよ。I would also like to see 3.x support, but it really shouldn’t be a priority above the2.x framework changes that still need to be made to the App Engine. Keep in mind thatGAE is a huge project and changing from 2.x to 3.x is difficult enough for a singlepython file, imagine having to make the changes for an entire code base. Novices, youwill see Python 2.x if you plan to be developing before 2012, so I’d recommendlearning Python 2.x as well, in fact, learning it first.Python3.xのサポートをみてみたいとは思うけど、2.xでの改良の方が重要だと思う。GAEは巨大なプロジェクトだし、1つのファイルを2.xから3.xに書き換えるだけでも大変だよ。全部書き換えるのがどれだけ大変な作業か想像してみなよ。２０１２年までに開発するなら2.xを勉強するのをおすすめするよ。Though there are 3.x features I have to admit I miss, and since it’s 2.5 instead of2.6, the future imports aren’t an option. A 2.6 upgrade at minimum might be nice.3.xで使いたい機能があるのは事実だから、2.5から2.6にアップデートしてくれると助かるんだよね。Comment 15 by Airpower…@gmail.com, Jun 2, 2009I’m most interested in the Unicode changes that bring a clarity and consistency which seems even more relevanton the web.Unicodeの取扱いの変更に一番興味があるよ。明確さと一貫性によって、よりWebに適した環境になると思うんだ。Comment 16 by TerryL…@gmail.com, Jul 15, 2009I want to see GAE support python3, but maybe it needs some time.GAEにpython3をサポートしてもらいたいけど、時間かかるんだろうな。I agree with dylnuge.Although I really really want GAE to support python3, I’m affraid it will toodifficult to be done in a year at least.So, the best strategy for me is to start with python2.5 and make things as simple aspossible.When python3 is supported someday, it will be time for me to redesign my app. I loveredesigning. But how about data migration?python3をサポートしてもらいたいんだけど、たぶん最低でも1年はかかるんだろうな。今は2.5でスタートして、できるだけシンプルにしておく作戦でいこうとおもう。ok, plz suport python 3.xOK, python3.xをサポートしてください。yes, Python 3 support is badly needed.Python3のサポートはほんとに必要なんだ。py3 support is good for newers！新人にはpython3がいいよね。Comment 22 by dro…@gmail.com, Nov 13, 2009+1 for python 3. With both django and App Engine lagging behind on python support, weare in a standstill. Someone has to make the first move! You’ve got to do it sooneror later!I’m want to GAE support python 3.x(>=1) too.python3.1以降をサポートしてほしいな。I’m want to GAE support python 3.x too同じく。Please support python 3.x on GAE同じく。Comment 26 by johnkdu…@gmail.com, Dec 1, 2009Logically we can expect P3 to resolve the speed issue. Meanwhile, energy used todevelop GAE on 2.X takes from 3.X. GAE3 should commence ASAP as beta before morecritical apps ‘depend’ on 2.X.It’s a replay of Cobol74 Vs Cobol85.論理的にいって、Python3をサポートすれば実効速度の問題を解決できる。Comment 27 by cesar.iz…@gmail.com, Dec 15, 2009Not even python 2.6 is supported right now. See Issue 757.現状では、python2.6もサポートされてないんだよ。Please support python 3.x on GAEThank you so much!Please, add Python 3 SDK!Python3を追加してください！I am very interested in using python 3 on GAEGAEでPython3を使いたいです！Comment 65 by dur…@gmail.com, Feb 21, 20113.2 is released when is it going to be supported on GAE?Python3.2リリースされたけど、いつGAEでつかえるの？Comment 66 by coolc…@gmail.com, Feb 22, 2011it has been more than 2 years now, 3 is stable enough…3.2 is out, must wait for 4?Python3でてから2年になる。もう十分安定してる。Comment 67 by moy…@gmail.com, Feb 22, 2011Seeing as how Python 2.7 just got “on deck” (GAE Roadmap),I’m sure we’ll get Python 3 support before Python 5 is released….no worries…やっと、Python2.7がロードマップに追加されたよ。WubiでUbuntu10.10をインストールしてみました。インストール自体は簡単にできたのですが、2点ハマりました。[GCC 4.4.5] on linux2まとめ日経ソフトウェア ２０１０年４月号特別付録の問題をPythonでといてみた。問題1: 「３の倍数と３のつく数字だけ・・・」123456789......震災後、がくっとブログのアクセスが減りました。検索エンジンからの訪問者が突如として半分ぐらいまで減りました。更新をサボってたのが原因かなーっておもってたんですが、どうやら違ったようです。この10日間ほど、地震のニュースばかり追いかける日々をすごしていないでしょうか？大勢の方が被災され、原発関連の二次災害も発生する中で落ち着きづらいというのも事実なのですが、心配しすぎてもしかたない。そう思いながらこの記事をまとめました。ソフトウェアの開発・運用基盤を提供するサービス 例) GoogleAppEngine、Azure、Force.comHaaS (Hardware as a Service) = IaaS (Infrastructure as a Service)サーバやネットワークインフラを提供するサービス 例) Amazon Web ServicesGAE(Google App Engine)はPaaSに分類されます。ハードウェアやOSを気にせずサービスの開発に専念できます。今回の震災ではデータセンタの被害はほとんどなかったように思いますが、GAEで構築したサービスは、データセンタ単位の障害が発生したとしても、継続してサービスを運用できます。Pythonのバージョンが古い以下のサイトから、Google App Engine SDK for Pythonをダウンロードしてインストールしてください。Windows版、MacOS X版、Linux版/その他のプラットフォーム版が用意されています。メニューから新規アプリケーションを選択URLLinker をYouTubeに対応させました。YouTubeっぽいURLを見つけると引数を解析して自動的にYouTubeのプレイヤーを埋めこみます。また、生成したHTMLのプレビューを画面の下部に表示するようにしました。<form action='/' method='post'><input type='hidden' name='phpMyAdmin' value='cfc2644bd9c947213a0141747c2608b0' /><textarea name='raw' style='float:left;width:450px;height:450px'>%s</textarea><div style='float:left;margin-top:70px'></div></form><br clear='all'></body></html>def linkURLs(str): def youtube(str):def nl2br(str):def main():震災以降、いろいろあわただしくて更新がとまってしまったいましたが、今夜はきっちり部ログ更新します。12時ごろには何か公開できる予定です。Python入門者に贈る１6の鍵 で、Pythonの変数名の例にfooやbarは使わないよって指摘いただいたので、調べてみた。Pythonという言語名は モンティ・パイソン に ちなんでつけられた ので、そのことにちなんでspam, ham, eggsなどの変数名を使うそうだ。せっかくなので、サンプルプログラムを書く場合はこれらの変数名を使ってみようとおもう。（もちろん、ちゃんとしたプログラムを作成する場合は、意味のある変数名を使いましょう）
41	答えを知りたい · python	You are currently browsing the archive for the python category.<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'><noInheritable/><assemblyIdentity</assembly>setup.pysetup.pyを書き換えて用意したこれらのファイルを読み込むように変更する。''' A simple class that holds information on our executable file. '''def __init__(self, **kw):self.__dict__.update(kw)MANIFEST_TEMPLATE = '''<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'><assemblyIdentitypy26MSdll = glob.glob(r'Py27MSdlls\*.*')data_files = [('', py26MSdll),]py2exe_options = {'compressed':1,)とまあこんな感じ使うわけです。文字列を引数にできない。Traceback (most recent call last):   File '', line 9, inどうやら文字列を渡すと文字数分だけの引数を渡したと解釈されてしまうらしい。解決策リリース 2.3 で撤廃されました。 上で述べられたような拡張呼び出し構文を使って ください。自分にはよくわからないですがということのようです。参考ここでHonor Code[敬意を持って守る規定]への同意を求められるのでよく読んで同意しましょう。英語は自分にはまだちょっと難しいですが、字幕を[CC]でつけて見ることもできるし、テキストやSRTファイルでダウンロードして読むこともできます。動画プレイヤーのVLCなら0.8倍速などのように音の高低を変化させずに再生速度を変えれますし、SRTファイルをそのまま再生中の動画にDrag & Dropするだけで字幕を表示できるのでオススメです。他にも面白そうな講座はたくさんありますので、どんな講座があるかだけでも眺めてみると良いんじゃないでしょうか。とか言ってるくるけど Ctrl-D をおしてもサーバーまで届かない。参考pythonインタプリタを終了すると追記します。んで、動かしたいpythonスクリプトの行頭にとpython.exeがある場所を書いておきます。以上で終わり。確認と書いて[xamppのフォルダ]\htdocs\pythontest.py に保存してxampp_start.exe でサーバーを起動させて参考～～～～～～～～前置きここまで～～～～～～～～やらなんかのエラーが出てしまう。インストールに必要なもの外部モジュールを使うためには以下の物が必要になってくる。外部モジュールのファイル本体さくらのレンタルサーバーのスタンダード以上のプランFTPクライアントFTPクライアント設定を入力したら[Open]で telnet を開いてlogin as:httplib2 → simplejson → simplegeo → python-twitter環境はWindows7でPython3.0.1 Portable。タグ
42	Python - BugbearR's Wiki	インデントはタブとスペース。タブは8桁スペースと同義。インデント数が違うと違うブロックとみなされる。よってブロックの始端終端の印はない。配列に相当するものはリストである。リストは可変長になっている。先頭から0基点のインデックスでアクセスできる。>>> a = ['a', 2, 'c'] >>> a[0] 'a' >>> a[1] 2 >>> a[2] 'c'C/Java などでの switch 文相当のものはない。C/Java などでの do-while 文相当のものはない。ライブラリがスレッドセーフではないので、仕方なくインタプリタが排他ロックして1スレッドのみを動かす仕組み。↑文法的にはかなりいい感じ。import モジュール名 の場合、モジュール名.メンバ名 でしかアクセスできない。よって名前は衝突しない。from モジュール名 import メンバ名 の場合、メンバ名で直接アクセスできるようになる。import での指定によっては名前の衝突の可能性がある。↑import foomodule import hoge.gero reload(foomodule) reload(hoge.gero)import していないと、name '...' is not defined というエラーになる。reload で指定するモジュール名は '' で囲まない点に注意。再度 from を実行して再定義するか、そもそも import を使うようにする。↑問題結果bar
43	Python - TSNETWiki on TextWorld - TS Networkのために	欠点といえば、実行速度の遅さと、日本での知名度の低さ、でしょうか。ともかく、「はじめてプログラミングを習ってみたい」なら、Pythonがお勧めです。Googleで採用されていることが大々的に報じられ、和訳や日本人によるPythonの本が増えた結果、以前よりも知名度はやや上がりましたが、どうもまだ『専門家の使う難しい言語だ』と誤解されている方が多いようです。私論ではありますが、普通に使う分には、多分学校教育などで未だ利用されているBASICより数段簡単ではないかと思うのですが……ソースコードの見通しの良さ(可読性)を最重要視なお、この可読性に関しては、他の要素と矛盾することが多く、特に書きやすさ（記述性？）との矛盾は、「手軽で書きやすい言語」というスクリプト言語の特徴と思われる部分と相反するため、批判が多い特徴でもあります。C/C++言語に似た言語仕様インデントブロック(非フリーフォーマット)これは、ABC言語から受け継いだ重要な仕様ですが、その意図は最初に述べた「可読性」重視によるものです。しかし、特にクラッシックな非フリーフォーマット言語を経験してきている方々には、非フリーフォーマットというだけでなんだか「古臭くて使いにくい」という印象を与え、敬遠される結果になっているようです。実際に使い始めた人は、あまり気にならなくなるようですが、それでも、AWKで流行った「一行野郎」（コンソールに一行で入力できるスクリプト）で、あまり凝ったことが出来なくなったのは事実で、スマートさをモットーとするパワースクリプターにはやや不人気のようです。文(statement)ベースの構文比類なき手軽なモジュールロング整数(多倍長整数)サポート↑関数型プログラミングをサポート↑スタック・フローオーバーに注意Pythonは比較的大きなメモリ空間を使用することができますが、スタックには限界があります。特に末尾再帰を最適化してgotoループにするような器用なことはしてくれません。たとえばこの、再帰を用いた階乗計算の式ですが……fact = lambda n m=1:m if n==0 else fact(n-1, m*n)この例では、大体1,000回程度でフローオーバーしてしまいます。この場合は、reduce（functools.reduce）を使用するか、素直にforループなどを使用しましょう。import functools fact2 = lambda n: functools.reduce((lambda x, y: x * y),range(1, n+1))def fact3(n):   k = 1   for x in range(1,n+1):     k *= x   return kどちらでも、10,000を指定してもスタックフローオーバーにはなりません。↑
44	Pythonを使っている製品あるいはソフトウェアの一覧 - Wikipedia	目次Blender - 3DCG、アニメーション、ゲーム制作環境
45	On Python - 紫藤のページ	Web 上で見当たらなかった文書やスクリプトを書いて公開しています。     特に Tkinter について詳しく書いてあります。Python メモ
46	Python Insider JA	名前空間の PEPサミットは Barry Warsaw の進行のもと、PEP 382 と 402 の議論から始まりました。少し議論を行った後、その2つの PEP の一部分のために求められているものに関して、最終的にその決定は延期されました。月曜日の PyCon スプリントで、その2つの PEP は却下されました (それぞれの PEP の上部に却下されたことが明記されています) 。Martin von Loewis は、その解決方法が見つかったと import-sig メーリングリストへ投稿しました 。そして Eric Smith がそのメーリングリスト上で合意された内容を新たな PEP として草稿を作成する予定です。事実上 PEP 382 は完全に却下されましたが、PEP 402 の一部分は承認されることでしょう。importlib の状況既に存在する課題のみを要点にして議論が始まりました。その課題はディレクトリの stat を行うときに発生し、時間の精度に関するマイナーな後方非互換の課題です。しかし、全員がそのことは致命的な問題を起こすようには思えないので、その作業を進捗させることで合意しました。さらに stat 呼び出し周りで最適化も行われました。この最適化は、Brett, Antoine Pitrou, P.J. Eby が自主的に行ったものでした。パフォーマンスの話題が持ちあがり、Brett は現在のピュア Python 実装は約 5% 遅くなると説明しました。Thomas Wouters は、5% 遅くなることは実際には良いことだと大きな声で言いました。特に彼が行っていた最近のベンチマークについて、何度かコンパイラを変更して起動時に 5% 違うことを紹介しながら説明しました。この 5% 遅くなることは、そのコードのインテグレーションを遅らせるものではないという認識が共有され、議論は良い方向に進みました。Brett がそのブートストラップが実際にどういったものであるかを説明しました。そしてまだ、その実装が、最初の 現実の フリーズされたモジュール (frozen module) の利用方法になるか調べて検証しているところだと続けました。Guido の最初の返答はこうでした。'最終的にそのフリーズされたコードの利用方法を見つけたと20年後に言うの？'importlib._bootstrap は、少しの関数の再実装に加え、処理に必要な組み込み関数を含むフリーズされたモジュールです。そのフリーズされたモジュールを含むライブラリは、 warnings, _os (posix からのコード), marshal です。default ブランチへのマージに関しては、これは 3.3 に向けて行うべきだとかなり幅広い合意が得られました。そして、アルファとベータサイクルを通して、その実装のマイレージを取得するためにすぐ行われます。そう間をおかずに行われた後に、Brett は python-dev で詳細を整理して、レビュー内容を見直す予定です。リリーススケジュール PEPPEP 407 と 413 は importlib の議論に続くものでした。名前空間 PEP の議論のように、アイディアは出ましたが、そのグループは PEP の承認について結論に至りませんでした。すぐに2つの PEP と結びつく標準ライブラリを分割して独自ライブラリにするアイディアが復活しました。しかし、テストスィートがどこに置かれるのかという疑問が残りました。さらに、標準ライブラリを取り扱うテストと、言語機能を取り扱うテスト間で区別する必要があるかもしれません。Thomas Wouters は、類似の LTS スタイルのリリースを行う Python コンシューマーで Python 'LTS' リリースのラインアップの難しさについて良い点を突きました。Ubuntu とその LTS スケジュールは主要な例です。Ubuntu のような何かのプラットフォーム上で動くリリースを計画する組織も同様です。出席していた多くの Linux ディストリビューションのパッケージャーが頷いているようでした。広く合意を得られたことの1つに、標準ライブラリのリリースサイクルを短くすることは、新たな貢献者にとっては良いことだということです。新たな機能追加に興味をもつ開発者からみて、一年以上に渡ってリリースしないというのはおもしろくありません。バグ修正を行ったとしても、時にはそのリリース期間があまりに長くなってしまうかもしれません。そのリリース時期というのは、可能な場合にユーザーが自分たちのコード内で我々の問題を修正してしまうところです。素早いバグ修正リリースはおそらくは良いことだと提案されました。しかし、そのパッケージの開発者たちが、より頻繁なリリースを行うために労力を惜しまず動いてくれるかを保証するため、我々はリリースマネージャーと共に確認する必要があります。その新たな機能リリースと同様、新たなバグ修正を行ったものを使うユーザーがいることも確認しなければなりません。Python ソフトウェア財団からの資金Steve と Jesse Noller は、全ての Python 実装だけでなく、サードパーティーのプロジェクトに向けても支援することに強い意志をもっていました。あるプロジェクトが資金提供を受けるのに必要なことは、そこで成し遂げられるものへの具体的な提案です。彼らは資金提供の準備は整っているのに、それが待ち状態であることにストレスを感じていました。つまり提案することは、その待ち状態を解除する手段です。資金提供のアイディアのいくつかは Steave からのものでしたが、会場内からも出ました。1つのアイディアとして、1ヶ月休職するのに資金提供するという議論がありました。そして、それは誰ができるかという問題がありました。何人かは、開発コミュニティにいるフリーランスのコンサルタントが雇いたい開発者になるかもしれないと提案しました。こういったフルタイムの雇用は、実際に長期休暇を取得するのが難しいという結論になるかもしれませんが、誰にでもその可能性はあります。コードレビューへの資金提供は、サードパーティプロジェクトの Python 3 への移行を推進するアイディアの1つでもあります。特に言えば Twsited プロジェクトで、その開発者たちは資金提供を受けるような労力があることを感じていました。ここに至り コアメンター グループは、新たな貢献者を取り込むのに成功していることを述べました。このことへの賛辞は、そのメーリングリストで行われています。virtualenv の追加約2分間、PEP 405 の議論が行われました。Carl Meyer は、参照実装は利用できる状態になっていて、ちゃんと動いていると述べました。Mac OS X のメンテナーから見ても有益であり、Ned Deily と Ronald Oussoren の2人ともそこに出席していました。PEP の残り作業はあと1つだけで、その宣言を行う誰かを見つけることです。そして Nick Coghlan がやらないのならと、Thomas Wouters が自分の名前をそこに追加しました (Nick は PEP の第一人者となるでしょう) 。PEP 397 の追加このサミットとは違う場での議論により、追加でこのランチャーが Python 3.3 Windows インストーラーでインストールされることが合意されました。その一方で、ランチャーをインストールしない独立したインストーラーとしても使えます。さらに、実装についての制約があまりにも細かい多くの低レベルな詳細を削除するという作業が PEP に行われます。例えば py.ini ファイルの配置の説明がそうです。speed.python.orgPEP 411 の追加PEP 411 は、標準ライブラリに暫定的なパッケージを含めることを提案します。最近、論議された regex と ipaddr モジュールは、この PEP に含まれるライブラリの例です。この標準ライブラリへの追加をどう実装してユーザーへ提示するかが主な論点となりました。最初の提案は、ドキュメントのノートだとうまくいかないということでした。ドキュメントはユーザーへ通知する1つの手段であり、それのみに頼っているわけではありません。特に今回のようなコードを追加するような種類のものに対してはそうです。ライブラリ上に実験的な状態を示すフラグを設けるという提案もありました。別の提案で暫定的なライブラリのインポート時に警告を表示するというのもありました。しかし、開発者が警告を有効にしてテストスイートを実行することを想定すると、ユーザーコードに影響を与えないように、デフォルトでは表示したくないということも考えられます。また一方で、我々が何度も経験してきたように、そういった警告をうっとうしく思い、全ての警告を無効にしてしまう開発者がいるというリスクがあります。PEP はプロセスについてどうあるかを要約します。そして、我々は追加されるライブラリが API の変更機能を使えるように保証する必要があります。また、幅広くユーザーに使われるコードのように変更を受け入れて、フィードバックに責任をもつ人たち、特にライブラリ作者を育てる必要もあります。振り返ってみて、Jesse Noller は multiprocessing がこの PEP が提案しているものの良い候補だと提案しました。このときになって、Michael Foord の mock を暫定的に unittest に、おそらくは unittest.mock として追加することが提案されました。その代わりに mock の安定した API と、我々が自分たちのテストスイート内でモックライブラリの必要に応じてよく使うものは、暫定的な状態を経ずに標準ライブラリへ直接追加するのが妥当だと合意を得ました。PEP 内の regex の役割の話題の中で、 regex は暫定的な状態を迂回して標準ライブラリへ導入するという Thomas Wouters のアイディアがありました。そして既存の re モジュールを sre という名前に移動します。その場では反対意見はありませんでした。そのライブラリのメンテナーは細心の注意を払い、API の変更についてかなり保守的にならないといけないという暫定的なライブラリのユーザーへも注意が必要です。我々が最もやりたくないことは、優れたライブラリのユーザーを動く標的にして、そのライブラリを導入することです。この変更を行うために、 PyArg_ParseTuple 関数はより多くの処理を行う必要があり、そうすると遅くなることが既に分かっています。もう1つの方法として PyArg_Parse を使うと遥かに速いです。そのタプルバージョンは、組み込み関数のどのような変更にも関係なく、そこから1つか2つの引数を受け取ります。組み込み関数を Python のものに置き換えるときに潜在的に互換性を壊してしまう箇所があります。それは、位置引数のみを受け取るときに潜在的に名前が競合するところがあります。関数シグネチャオブジェクトに関する PEP 362 は、一般にデコレーターで使われ、ここで役立ちます。残っている作業はその PEP をもう一度見直して、誰かが定義することだけにみえます。Python 3 への移行移行ドキュメントに現実の世界の移行例をもっと紹介することが提案されました。理想的には、こういったプロジェクトのチェンジセットの移行についてです。クックブックスタイルのアプローチを取っている我々の移行ドキュメントは、良いアイディアだと支持する人もいました。新しい dict 実装また、この実装はソート順序の違いをもたらすというユーザーに見える違いだけでなく、最近のハッシュのランダム化作業はこのことを問題点としているということも述べました。新しい pickle プロトコルLukasz Langa が提案した PEP 3154 は、新しい pickle プロトコル (バージョン4) の仕様です。Lukasz は multiprocessing の例外を pickle 化するのに課題があると指摘して、Antoine がその課題を解決しました。修飾された名前が役に立つ一方で、この PEP はもっと関心を払う必要があると合意されました。名前:私の最初のコミット (チェンジセット 28686）は、time.strptime() の文字列のエスケープに関する修正でした (そのコミットが Python への私の最初の貢献になったのはたまたまです) 。いま開発しているのは Python のどの分野ですか？Python のコア開発を行っていないときは Python でどんなことをしますか？プログラミングをしていないときは何をしていますか？名前:コアコミッタになってどのぐらいですか？コア開発者として始めたときはどうでしたか？最初のコミットを覚えていますか？いま開発しているのは Python のどの分野ですか？その他に様々なマイナーな方法で Python をサポートすることに関与しています。例えば、Planet Python をメンテナンスしたり、PSF メンバーになったり、python.org のウェブマスターを手伝ったりしています。Python のコア開発を行っていないときは Python でどんなことをしますか？時間の空いたときに、 unittest2 (その他のプラットフォーム向けに unittest の改善のバックポート)、 mock (モックオブジェクトを提供してテスト中にモンキーパッチをサポートするテストライブラリ)、その他の多くの機能に関するプロジェクトに取り組みます。私はもっとコーディングしたいのですが、IronPython in Action という書籍を書くために2年間の大半をかけて専念したことにより、すぐに大規模なプロジェクトには関わらないように考えています。プログラミングをしていないときは何をしていますか？さらに私は XBox 向けのゲームをします。不運にも好きなゲームを見つけてしまったときは、何週間もそのゲームに引き込まれるので私は注意するようにしています。この理由のために World of Warcraft や EVE Online といったゲームはしないようにしています。また、毎月のノーサンプトンのギークミーティングの運営も行っています。そこには Python ユーザーグループの Python プログラマーはあまりいませんが、あらゆる類いの優れたギークたちが集まります。普通は、ただパブに集まって気軽に話したり、自分たちの最新のガジェットを披露します。Mark Hammond ( pywin32 の作者であり、長い間 Windows 環境の Python サポーター) は、 PEP 397 を提案しました。その PEP は Windows 環境の新たな Python ランチャーについて記述したものです。Vinay Sanjip (標準ライブラリ logging モジュールの作者) は、つい先日そのランチャーを実装して、いま https://bitbucket.org/vinay.sajip/pylauncher/downloads からダウンロードできます。このランチャーは、Python 2 と 3 が同時に利用可能であり、Windows 環境の Python スクリプト (.py と .pyw ファイル) に対して、実行する Python のバージョンを指定します。Windows ユーザーは、残っている問題を解決する Python 開発者を支援するために、このランチャーをダウンロードしてテストすることを検討してください。このランチャーは、独立したアプリケーションとしてパッケージングされていて、現在、利用できる Python のバージョンをサポートします。目的としては、ランチャーが完成したら、Python 3.3 の一部として提供する予定です。(依然として、以前のバージョンのユーザー向けに独立したアプリケーションとして利用できるようにする予定ではあります)このランチャーは2つのバージョンが利用できます。 Program Files ディレクトリにインストールする launcher.msi と、Windows の System32 ディレクトリにインストールする launchsys.msi です (64 ビット Windows 向けの 64 ビットバージョンも用意されています) 。ランチャーについての詳細ランチャーは、 py.exe (コンソールバージョン) と pyw.exe (GUI バージョン) の2つの実行可能ファイルを提供する。ランチャーは、 .py (コンソール) と .pyw (GUI) の拡張子をもつファイルのハンドラとして登録される。スクリプトを実行すると、ランチャーは Unix スタイルの #! (シェバング) を探す。そして python (システムデフォルトの Python)、 python2 (デフォルトの Python 2 リリース)、 python3 (デフォルトの Python 3 リリース) の実行可能ファイルを認識する。このバージョン指定の詳細レベルは、ユーザまたはマシン毎に簡単に変更できる。独立して使う場合、 py.exe コマンドランチャーは Python 対話型インタープリターを起動する。次の用途にコマンドラインスイッチがサポートされる。 py -2 が Python 2 を、 py -3 が Python 3 を、 py がデフォルトバージョンを起動する。シンプルな使い方Python 2 を使う必要があるスクリプトを指定するには、単に次の1行を一方、Python 3 を使う必要があるスクリプトを指定したいなら、次の1行を最初の行に追加してください。#!/usr/bin/env python3また次のいずれかのコマンドを使って、Python インタープリターを起動できます。# Python のデフォルトバージョン py # Python 2 py -2 # Python 3 py -3実行するには、 py.exe の実行可能ファイルのパスが通っている必要があります。これはインストーラーの launchsys バージョンでは自動的に追加されますが、 launcher.msi のバージョンでは PATH に対して手動でインストールディレクトリ (C:\Program Files\Python Launcher) を追加する必要があります。参考文献Vinay による C 実装の発表: http://mail.python.org/pipermail/python-dev/2011-July/112184.htmlこのリリースに関する問題、または何か他に問題を見つけたら http://bugs.python.org/ へ報告してください。修正箇所I/O#1195 は修正するのに2、3年かかりましたが、 fgets を呼び出す前に clearerr を行うシンプルな修正により、 input() 内部で CTRL-D による sys.stdin.read() の中断に関する問題を解決しました。 io システムは、 #12175 において、 read() が None を返すときに、その返り値の None と共に readall メソッドでクリーンアップするようにしました。そして、ファイルが開けないときは ValueError を発生させます。#11272 は、RC2 で行われた修正内容ではありませんが、3.2.1 の重要な修正内容で、Windows 環境での文字列の後ろに続く \r に関する input() の修正です。この問題は何度も報告され、多くの人に影響を与えていました (disutils の upload コマンドなど) 。3.2.1 がうまく解決してくれることを望みます。Windows3.2.0 は、Windows 向けに os.symlink という新機能を追加しました。この機能は #12084 の問題からきていて、 os.stat は、Windows のシンボリックリンクを間違って評価するので、内部の様々な stat 関数の仕組みが修正されました。あるユーザーが os.path.isdir が遅いことに気付きました。この原因は、前述した os.stat の修正によるもので、特にシンボリックリンクを評価するときに通常ファイルより2倍遅くなっていました。 os.path.isdir は、パフォーマンスのボトルネックにはならないとはいえ、インタープリター上で何度も呼び出されます。 GetFileAttributes を使う #11583 の修正により、ほんの少しだけ高速化されます。subprocessその他いつものように、どんな問題でも http://bugs.python.org へ見つけた問題を報告してください。私たちは、みんなの協力により品質の高い Python をリリースできることに感謝しています。Python 2.6.7 はソースリリースのみですが、3つのセキュリティの脆弱性への対策が行われました。現在、2.6 系はセキュリティモードであり、これらのリリースは、基本的には必要に応じて2013年10月まで、ソースのみ提供されます。もしバイナリインストーラーが必要なら、2.7 か 3.2 へアップグレードすることを検討してください。2.6.7 は、以前このブログで紹介した urllib の脆弱性 の対策を含んだ最初のリリースです。さらに smtpd の DoS (課題 #9129 ) と SimpleHTTPServer.list_directory の XSS (課題 #11442 ）の脆弱性も修正されています。2.7.22.x 系の最後のマイナーバージョンである 2.7 は、2010年11月の 2.7.1 から 150 個以上のバグ修正が行われています。 2.7.2 のソースとバイナリインストーラーは、6月12日現在で利用できる状態にあり、2.6.7 の節で説明したセキュリティの脆弱性の修正も含まれています。他にもたくさんのクラッシュする不具合が修正されました。例えば、別スレッドがメモリに関する変更を行ったときに Python が管理下にないメモリを不正利用してしまう不具合や、クラスから __abstractmethods__ を削除するとき、メモリマップファイルへ更新前のファイル長でアクセスしてしまうことなど、その他にもいくつか修正されました。3.1.4 は 3.1.x 系の最後のバグ修正リリースです。3.2 へ移行するにつれて 3.1 はセキュリティモードに入ります。3.1.4 は2010年11月の 3.1.3 リリースから 100 個以上のバグ修正を含みます。2.7.2 と同様に、バイナリインストーラーが6月12日現在で利用できます。3.1.4 は、2.6.7 で説明したセキュリティ脆弱性の修正を含む最初の 3.x 系のリリースです。3.1.4 は、オブジェクトを調べる __dir__ に関するいくつかの問題や、 os.stat と os.utime の Windows 環境の実装における2038年以降の日付の問題、たくさんの 64 ビットのクリーンアップの問題を修正しました。 io ライブラリは、データが読み込めなくて、他の場所で適切な例外が発生したときに None を返す変更がたくさん見られます。64 ビット Windows 環境での ctypes のコールバック引数が修正されて、クラッシュしないように改善されました。Copyright
47	Python - 俺の基地	存在したらtrueが返るようですディレクトリのケツに/はいらないみたいです▲   ▼
48	Python - KDE (Kitagawa Data Engineering) LAB	Last Modified: 1999.04.17(Sun)$BF|K\8l$K$h$k(B Python $B$N%a%$%j%s%0%j%9%H$r1?MQ$7$F$$$^$9!#(BPerl $B$O$I$&$b(B...$B!'(BTcl $B$b$J$s$@$+(B...     $B$=$l$K%9%/%j%W%H$G$b%*%V%8%'%/%H;X8~$7$?$$!*(B      $B$H$$$&?M$O(B Python $B$r;H$$$^$7$g$&!#(B     Unices, MS-Windows, Macintosh $B$N$$$:$l$G$bF0:n$7$^$9!#(B     OS/2 $B$d(B BeOS $B$K$b%]!<%H$5$l$F$$$k$h$&$G$9!#(B$B$3$N%Z!<%8$G$O(B $B%*%V%8%'%/%H;X8~%9%/%j%W%H8@8l(B Python $B$r>R2p$7$F(B       $B$$$^$9!#(B$B$^$@$^$@F|K\$G$O%^%$%J!<$J8@8l$N$h$&$G$9$,!'>/$7$G$b9-$a$k$?$a(B       $B$N$5$5$d$+$JEXNO$N$D$b$j$G>/$7$E$D>pJsNL$rA}$7$F$$$/M=Dj$G$9!#(B$B$$$D$NF|$+(B Perl $B$N:B$rC%$&$3$H$rL48+$F(B... :-P$B$=$N$&$A4JC1$JF~Lg%3!<%9$r=q$-$?$$$H;W$$$^$9$,(B,        $B$$$D$K$J$k$+$O(B... $BK\6H$N8&5f$N?JE86q9g$K$h$j$^$9(B...        ($B$H$$$&$3$H$OEvJ,IT2D$+!)(B ^_^;)Python $B$C$F$I$s$J8@8l!)(B$B%b%8%e!<%k5!9=(B($BL>A06u4V$NJ,3d$H%^!<%8(B)$BNc30=hM}5!9=(B($BG$0U$N%*%V%8%'%/%H$rNc30%*%V%8%'%/%H$H$7$FEj(B  $B$2$i$l$k(B)$B%*%V%8%'%/%H;X8~5!9=(B($BB?=E7Q>5$'$j(B)$BBPOCE*%$%s%?!<%U%'%$%9(B$B$J$I$rHw$($?%9%/%j%W%H8@8l$G$9!#(B     $B$^$?(B$B4X?t$b4^$a$9$Y$F$,%*%V%8%'%/%H(B$B4J7i$J%7%s%?%/%9(BC/C++ $B$K$h$k3HD%%b%8%e!<%k!'3HD%%/%i%9$N:n@.$,MF0W(B$B%9%?%s%I%'%m!<%s$J%'%W%j$NAH9~$_8@8l$H$7$F$NMxMQ$,2DG=(B$BI8=`!'HsI8=`$NB??t$N%b%8%e!<%k72$,B8:_$9$k(B$B$J$I!'BgJQL%NO$'$k8@8l$G$9!#(B     $B8D?ME*7P83$+$i8@$&$H(B Perl $B$d(B Tcl $B$h$j$b=$F@$,MF0W$G$9!#(B$B!V%7%s%?%/%9!W$,4J7i$G$'$k$H$$$&$N$O(B$B%V%m%C%/$,%$%s%G%s%H$K$h$jI=$5$l$k$3$H$K$h$jM>J,$J3g8L$,(B  $BL5$/$J$j!'%3!<%I$,%9%C%-%j$9$k(B$B0l$D$N5!G=$r$B0lJ}(B Python $B$O$'$kDxEYBg5,LO$J%'%W%j$K$bMxMQ$G$-$k$H$$$&$3$H$r(B       $B9MN8$KF~$l$F$$$k$i$7$/!'>/$7$P$+$j$N5-=R$NJX59$N$?$a$K%W%m%0%i(B       $B%`$N$o$+$j0W$5(B, $B8+DL$7$NNI$5$r5>@7$K$9$k$h$&$J$3$H$O$7$F$$$^$;(B       $B$s!#(B       comp.lang.python $B$G$O;~@^!V$3$&$$$&%3%s%9%H%i%/%H$rDI2C$7$F$O(B       $B$I$&$+!W$H$$$&5DO@$,$'$j$^$9$,!'KX$I$N>l9g(B Python $B$NH/L@$B%*%V%8%'%/%H5!9=$bBgJQ%7%s%W%k$G$9$,!'5!G=$H$7$FI,MW==J,$J$b$N(B       $B$@$H;W$$$^$9!#(B$B$3$l$i$N;v$O!'JL$K:#8e$b(B Python $B$O8=:_$N;EMM$N$^$^$G$'$k$H$$$&(B       $B0UL#$G$O$'$j$^$;$s!#(B       $BNc$($P%/%i%930$+$i%'%/%;%9$G$-$J$$%W%i%$%Y!<%H%a%s%P!<$O(B 1.4        $B$G$O@5<0$K$O:n@.$G$-$^$;$s$G$7$?$,(B 1.5 $B$G$O@5<0$K%5%]!<%H$5$l(B       $B$k$h$&$K$J$j$^$7$?!#$D$^$j(B Guido $B;a$rGCO$O$'$k$o$1$G$9!#(B       $B5DO@$b(B SIG $B$d(B comp.lang.python $B$J$I$G%*!<%W%s$K9T$J$o$l$F$$$^(B       $B$9!#(B$B8=:_$N:G?7HG$O(B 1.5.2 $B$G$9$,!'(B1.5 $B7ONs$O$3$l$,:G8e$G!'CO$,$'$k$h$&$G$9!#(B$BBPOCE*%$%s%?!<%U%'!<%9$rHw$($F$$$k$H$$$&$N$O;d$K$H$C$F$OBgJQ=E(B       $BMW$J$3$H$G$9!#(B       $BBPOCE*$K;n$7$J$,$i%W%m%0%i%_%s%0$r?J$a$?$j!'$'$k$$$O4D6-$r9=C[(B       $B$7$J$,$i(Java $B$C$F2?$@$+%$%s%?%W%j%?J}<0$G$'$k$N$bGd$j$N0l$D$K$J$C$F$k(B        $B$i$7$$$1$I!'BPOCE*%$%s%?!<%U%'%$%9$,L5$$$s$8$c0UL#$J!<$$!'$H(B        $B;W$&$s$@$1$I$J!#(B        $B%W%i%C%H%[!<%`$K0MB8$7$J$$$H$+$$$C$F$k$1$I!'$=$s$J$N(B Scheme        $B$H$+B>$N8@8l$@$C$F%$%s%?%W%j%?$r%$%s%9%H!<%k$7$F$*$1$PF1$8$8$c(B        $B$s!#(B        $B2?$@$+@($$?75;=Q$N$h$&$K@kEA$5$l$F$k$1$I!'%P!<%A%c%k%^%7%s$@$C(B        $B$FJL$K0JA0$+$i$'$k$o$1$@$7(B(prolog $B$K$@$C$F(B WAM $B$,$'$k$b$s$M(B)        $B%M%C%H$r0U<1$7$?$C$F$3$H0J30?75,@-$r46$8$J$$$s$@$1$I(B...         $B$^$'!'%M%C%H$r0U<1$7$F$$$k$C$F;v$,:#$N7W;;5!4D6-$K%^%C%A$7$F(B        $B$$$F=EMW$J$s$@$H$$$o$l$l$P$=$&$+$b$7$l$J$$$1$I(B)($B$I$&$b(B Java $B$K$D$$$F$O(B interface $B$@$H$+!'5$r35(B        $BG0$H$7$F6hJL$7$F$$$k;v$,=EMW$J$s$@$H$$$&0U8+$b$'$k$=$&$G$9!#(B        $B$^$'!'(BC++ $B$J$IB>$N8@8l$G$bF1MM$N;v$O2DG=$K$O2DG=$@$1$l$I!'8@(B        $B8l$H$7$F$=$N6hJL$r6/MW$9$k;v$,Bg@Z$H$$$&9M$(J}$i$7$$$G$9!#(B        $BB?=E7Q>5$,IT2D$J$N$b!'F1MM$K8@8l$K$h$k0-$$%^%J!<$N6/@)E*6X;_(B        $B$H$$$&;v$i$7$$!#(B        $B$G$b!'8D?ME*$K$O$=$s$J=j$^$G8@8l$K;X?^$5$l$?$/$O$J$$$1$I!#(B        $B8@8l$O$=$l$r;HMQ$9$k?M4V$N;W9M$rI=8=$9$k$?$a$NF;6q$G$'$C$F!'(B        $B$=$l$K$h$j;W9M$,@)8B$5$l$k$N$C$F!'$A$g$C$H$d$@!#(B        $B%=%U%H%&%'%'9)3XE*$K$O$=$&$$$&;v$bI,MW$@$C$F$$$&$N$bJ,$+$k$s(B        $B$G$9$,(B...)$B;d$,(B Python $B$K46$8$kITK~(B$B4v$D$+ITK~$b46$8$F$$$k$N$G$=$l$i$r5s$2$F$_$^$9!#(B$B=hM}$,CY$$!#%M%$%F%#%t%3!<%I$X$N%3%s%Q%$%i$,L5$$!#(BPython $B$O(B Perl $B$KHf$Y$k$H?tG\CY$$$h$&$G$9!#(B  $B0l$D$K$O$^$@%3!<%I$N%*%W%F%#%^%$%:$J$I$,$=$l$[$I$5$l$F$$$J$$(B  $B$H$$$&;v$,$'$k$N$@$H;W$$$^$9!#Nc$($P4X?t$d%a%=%C%I$N8F$S=P$7(B  $B$GL>A0$N%k%C%/%'%C%W$r$9$k$N$G$9$,!'$=$N=hM}$,CY$$$H$$$&;v$J(B  $B$I$O(B Guido $B;a$OG'<1$O$7$F$$$k$h$&$G$9$,!'$=$l$KBP$9$kBP=h$O(B  $BFC$K$7$F$$$J$$$h$&$G$9(B($B$A$g$C$H5-21$,IT3N$+$J$N$G$3$NOC$O%&(B  $B%=$+$b$7$l$J$$(B..)$B$G$9$,$3$l$,5$$K$J$k$N$OBgNL$N%G!<%?$r=hM}$7$?$j$9$k$h$&$J!'(B  $B$h$C$\$I$N;~$@$1$@$H;W$$$^$9!#(B  $B$A$g$C$H$7$?(B throw-away $B%9%/%j%W%H$G$7$?$iLdBj$O$J$$$G$7$g$&!#(B$B;d$O$N8@8l$G$b%$%s%?%W%j%?$J$iF1MM$KCY$$$H;W$$$^$9$,(B)$B!#(B  $B$^$?%a%b%j$N;HMQ8zN($b0-$/$J$j$^$9!#(B  $B$=$s$J;~$K$O(B C $B$G3HD%%/%i%9$d3HD%%b%8%e!<%k$r=q$$$F!'%\%H%k(B  $B%M%C%/$K$J$C$F$$$kItJ,$N8zN(2=$r7W$j$^$9!#(B  $BBgDq$=$l$G$J$s$H$+$J$j$^$9!#(B($B$G$b:G6a$OPython $B$O(B Lisp $B$J$I$HF1MM%*%V%8%'%/%H$OF0E*$K7?IU$1$5$l$^$9!#(B  $B$G$9$+$i$b$7$bL@$+$J%W%m%0%i%^$N%_%9$K$h$j!'$'$k$Y$-$G$J$$7?(B  $B$N%*%V%8%'%/%H$,;HMQ$5$l$F$$$?$jE,MQIT2DG=$J%a%=%C%I$r8F$S=P(B  $B$=$&$H$7$F$$$F$b!'%3!<%I$N$=$NItJ,$,$B$3$l$O%3!<%I$N%G%P%C%0$bBgJQ$G$9$7!'=*N;4V:]$K$N$_$B$G$9$,:G6a(B Python2C $B$H$$$&!'(BPython $B$N%b%8%e!<%k$r(B C $B$KJQ49$9$k%9(B     $B%/%j%W%H$N3+H/$b9T$J$o$l$F$$$k$h$&$G!':#$KPython $B$N%b%8%e!<%kC#(BPython $B$K$OL>A06u4V$rJ,3d4IM}$9$k$?$a$N%b%8%e!<%k5!9=$,$'$j$^$9!#(B     $B$^$?B?$/$N5!G=$,8@8l$N%3%'$+$i$OJ,N%$5$l$F%b%8%e!<%k%i%$%V%i%j$H(B     $B$7$FDs6!$5$l$F$$$^$9!#(BPython $B$N%Q%C%1!<%8$KImB0$7$F$/$k%i%$%V%i%j$NB>$K$b%f!<%6%0%k!<(B     $B%W$J$I$K$h$j3+H/!&Ds6!$5$l$F$$$kB?$/$NHsI8=`%b%8%e!<%k$b$'$j$^$9!#(B     $B$3$l$i$O(B Python $B$NL%NO$N0l$D$G$'$j!'(BPython $B$r$BI8=`E*$J%b%8%e!<%k$H$7$F$O
49	「Python」最新質問一覧 - 質問！ITmedia	キーワード一覧に戻る
